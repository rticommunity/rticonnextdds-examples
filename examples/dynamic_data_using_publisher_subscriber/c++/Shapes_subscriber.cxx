/* Shapes_subscriber.cxx

   A subscription of data type ShapeType using DynamicData

   This file is derived from code automatically generated by the rtiddsgen 
   command:

   rtiddsgen -language C++ -example <arch> Shapes.idl
   
   If you are not using and IDL to generate the TypeCode,
   you will need to create it manually. Follow other DynamicData
   examples (such as NestedStruct one) to learn how to do it. 

   Example:
        
       To run the example application on domain <domain_id>:
                          
       On Unix: 
       
       objs/<arch>/Shapes_publisher <domain_id> <sample #>
       objs/<arch>/Shapes_subscriber <domain_id> <sample #> 
                            
       On Windows:
       
       objs\<arch>\Shapes_publisher <domain_id> <sample #>
       objs\<arch>\Shapes_subscriber <domain_id> <sample #>
              
       
modification history
------------ -------       
*/

#include <stdio.h>
#include <stdlib.h>
#ifdef RTI_VX653
#include <vThreadsData.h>
#endif
#include "Shapes.h"
#include "ndds/ndds_cpp.h"

#define EXAMPLE_TYPE_NAME "ShapesType"

class ShapeTypeListener : public DDSDataReaderListener {
  public:
    virtual void on_requested_deadline_missed(
        DDSDataReader* /*reader*/,
        const DDS_RequestedDeadlineMissedStatus& /*status*/) {}
    
    virtual void on_requested_incompatible_qos(
        DDSDataReader* /*reader*/,
        const DDS_RequestedIncompatibleQosStatus& /*status*/) {}
    
    virtual void on_sample_rejected(
        DDSDataReader* /*reader*/,
        const DDS_SampleRejectedStatus& /*status*/) {}

    virtual void on_liveliness_changed(
        DDSDataReader* /*reader*/,
        const DDS_LivelinessChangedStatus& /*status*/) {}

    virtual void on_sample_lost(
        DDSDataReader* /*reader*/,
        const DDS_SampleLostStatus& /*status*/) {}

    virtual void on_subscription_matched(
        DDSDataReader* /*reader*/,
        const DDS_SubscriptionMatchedStatus& /*status*/) {}

    virtual void on_data_available(DDSDataReader* reader);
};

void ShapeTypeListener::on_data_available(DDSDataReader* reader)
{
    /* We need to create a DynamicDataReader to receive the DynamicData
     * and a DynamicDataSeq to store there the available DynamicData received 
     */
    DDSDynamicDataReader *DynamicData_reader = NULL;
    DDS_DynamicDataSeq data_seq;
    DDS_SampleInfoSeq info_seq;
    DDS_ReturnCode_t retcode;
    int i;

    /* To use DynamicData, we need to assign the generic DataReader to
     * a DynamicDataReader, using DDS_DynamicDataReader_narrow.
     * The following narrow fuction should never fail, as it performs 
     * only a safe cast.
     */
    DynamicData_reader = DDSDynamicDataReader::narrow(reader);
    if (DynamicData_reader == NULL) {
        printf("DataReader narrow error\n");
        return;
    }

    retcode = DynamicData_reader->take(
        data_seq, info_seq, DDS_LENGTH_UNLIMITED,
        DDS_ANY_SAMPLE_STATE, DDS_ANY_VIEW_STATE, DDS_ANY_INSTANCE_STATE);

    if (retcode == DDS_RETCODE_NO_DATA) {
        return;
    } else if (retcode != DDS_RETCODE_OK) {
        printf("take error %d\n", retcode);
        return;
    }

    for (i = 0; i < data_seq.length(); ++i) {
        if (info_seq[i].valid_data) {
            data_seq[i].print(stdout,1);
        }
    }

    retcode = DynamicData_reader->return_loan(data_seq, info_seq);
    if (retcode != DDS_RETCODE_OK) {
        printf("return loan error %d\n", retcode);
    }
}

/* Delete all entities */
static int subscriber_shutdown(
    DDSDomainParticipant *participant,
    DDSDynamicDataTypeSupport *type_support)
{
    DDS_ReturnCode_t retcode;
    int status = 0;

    if (participant != NULL) {
        if (type_support != NULL) {
            delete type_support;
            type_support = NULL;
        }

        retcode = participant->delete_contained_entities();
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_contained_entities error %d\n", retcode);
            status = -1;
        }

        retcode = DDSTheParticipantFactory->delete_participant(participant);
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_participant error %d\n", retcode);
            status = -1;
        }
    }

    /* RTI Connext provides the finalize_instance() method on
       domain participant factory for people who want to release memory used
       by the participant factory. Uncomment the following block of code for
       clean destruction of the singleton. */

    retcode = DDSDomainParticipantFactory::finalize_instance();
    if (retcode != DDS_RETCODE_OK) {
        printf("finalize_instance error %d\n", retcode);
        status = -1;
    }

    return status;
}

extern "C" int subscriber_main(int domainId, int sample_count)
{
    DDSDomainParticipant *participant = NULL;
    DDSSubscriber *subscriber = NULL;
    DDSTopic *topic = NULL;
    ShapeTypeListener *reader_listener = NULL; 
    DDSDataReader *reader = NULL;
    DDS_ReturnCode_t retcode;
    const char *type_name = NULL;
    int count = 0;
    DDS_Duration_t receive_period = {1,0};
    int status = 0;
    /* Dynamic Data parameters that we will need */
    struct DDS_TypeCode *type_code = NULL;
    struct DDS_DynamicDataTypeProperty_t props;
    DDSDynamicDataTypeSupport *type_support = NULL;

    participant = DDSTheParticipantFactory->create_participant(
        domainId, DDS_PARTICIPANT_QOS_DEFAULT, 
        NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (participant == NULL) {
        printf("create_participant error\n");
        subscriber_shutdown(participant, type_support);
        return -1;
    }

    subscriber = participant->create_subscriber(
        DDS_SUBSCRIBER_QOS_DEFAULT, NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (subscriber == NULL) {
        printf("create_subscriber error\n");
        subscriber_shutdown(participant, type_support);
        return -1;
    }

    /* Create DynamicData using TypeCode from Shapes.cxx
     * If you are NOT using a type generated with rtiddsgen, you
     * need to create this TypeCode from scratch. 
     */
    type_code = ShapeType_get_typecode();
    if (type_code == NULL) {
        printf("get_typecode error\n");
        subscriber_shutdown(participant, type_support);
        return -1;
    }

    /* Create the Dynamic data type support object */
    type_support = new DDSDynamicDataTypeSupport(type_code, props);
    if (type_support == NULL) {
        fprintf(stderr, "create type_support error\n");
        subscriber_shutdown(participant, type_support);
        return -1;
    }

    /* Register the type before creating the topic */
    type_name = EXAMPLE_TYPE_NAME;
    retcode = type_support->register_type(participant, type_name);
    if (retcode != DDS_RETCODE_OK) {
        printf("register_type error %d\n", retcode);
        subscriber_shutdown(participant, type_support);
        return -1;
    }

    /* Make sure both publisher and subscriber share the same topic name.
     * In the Shapes example: we are subscribing to a Square, wich is the
     * topic name. If you want to publish other shapes (Triangle or Circle),
     * you just need to update the topic name. 
     */
    topic = participant->create_topic(
        "Square",
        type_name, DDS_TOPIC_QOS_DEFAULT, NULL /* listener */,
        DDS_STATUS_MASK_NONE);
    if (topic == NULL) {
        printf("create_topic error\n");
        subscriber_shutdown(participant, type_support);
        return -1;
    }

    /* Create a data reader listener */
    reader_listener = new ShapeTypeListener();

    /* First, we create a generic DataReader for our topic */
    reader = subscriber->create_datareader(
        topic, DDS_DATAREADER_QOS_DEFAULT, reader_listener,
        DDS_STATUS_MASK_ALL);
    if (reader == NULL) {
        printf("create_datareader error\n");
        subscriber_shutdown(participant, type_support);
        delete reader_listener;
        return -1;
    }

    /* Main loop */
    for (count=0; (sample_count == 0) || (count < sample_count); ++count) {

        printf("ShapeType subscriber sleeping for %d sec...\n",
               receive_period.sec);

        NDDSUtility::sleep(receive_period);
    }

    /* Delete all entities */
    status = subscriber_shutdown(participant, type_support);
    delete reader_listener;

    return status;
}

#if defined(RTI_WINCE)
int wmain(int argc, wchar_t** argv)
{
    int domainId = 0;
    int sample_count = 0; /* infinite loop */ 
    
    if (argc >= 2) {
        domainId = _wtoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = _wtoi(argv[2]);
    }
    
    /* Uncomment this to turn on additional logging
    NDDSConfigLogger::get_instance()->
        set_verbosity_by_category(NDDS_CONFIG_LOG_CATEGORY_API, 
                                  NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
    */
                                  
    return subscriber_main(domainId, sample_count);
}

#elif !(defined(RTI_VXWORKS) && !defined(__RTP__)) && !defined(RTI_PSOS)
int main(int argc, char *argv[])
{
    int domainId = 0;
    int sample_count = 0; /* infinite loop */

    if (argc >= 2) {
        domainId = atoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = atoi(argv[2]);
    }


    /* Uncomment this to turn on additional logging
    NDDSConfigLogger::get_instance()->
        set_verbosity_by_category(NDDS_CONFIG_LOG_CATEGORY_API, 
                                  NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
    */
                                  
    return subscriber_main(domainId, sample_count);
}
#endif

#ifdef RTI_VX653
const unsigned char* __ctype = *(__ctypePtrGet());

extern "C" void usrAppInit ()
{
#ifdef  USER_APPL_INIT
    USER_APPL_INIT;         /* for backwards compatibility */
#endif
    
    /* add application specific code here */
    taskSpawn("sub", RTI_OSAPI_THREAD_PRIORITY_NORMAL, 0x8, 0x150000, 
        (FUNCPTR)subscriber_main, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
   
}
#endif

