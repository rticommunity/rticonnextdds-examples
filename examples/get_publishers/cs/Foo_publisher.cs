using System;
using System.Collections.Generic;
using System.Text;
/* Foo_publisher.cs

   A publication of data of type Foo

   This file is derived from code automatically generated by the rtiddsgen 
   command:

   rtiddsgen -language C# -example <arch> Foo.idl

   This example shows how to create some publshers and how to access all 
   the publishers the participant has.

   Example:

       To run the example application on domain <domain_id>:

       bin\<Debug|Release>\Foo_publisher <domain_id> <sample_count>

       
modification history
------------ -------       
*/

public class FooPublisher {

    public static void Main(string[] args) {

        // --- Get domain ID --- //
        int domain_id = 0;
        if (args.Length >= 1) {
            domain_id = Int32.Parse(args[0]);
        }

        // --- Get max loop count; 0 means infinite loop  --- //
        int sample_count = 0;
        if (args.Length >= 2) {
            sample_count = Int32.Parse(args[1]);
        }

        /* Uncomment this to turn on additional logging
        NDDS.ConfigLogger.get_instance().set_verbosity_by_category(
            NDDS.LogCategory.NDDS_CONFIG_LOG_CATEGORY_API, 
            NDDS.LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
        */
    
        // --- Run --- //
        try {
            FooPublisher.publish(
                domain_id, sample_count);
        }
        catch(DDS.Exception)
        {
            Console.WriteLine("error in publisher");
        }
    }

    static void publish(int domain_id, int sample_count) {

        // --- Create participant --- //

        /* To customize participant QoS, use 
           the configuration file USER_QOS_PROFILES.xml */
        DDS.DomainParticipant participant =
            DDS.DomainParticipantFactory.get_instance().create_participant(
                domain_id,
                DDS.DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT, 
                null /* listener */,
                DDS.StatusMask.STATUS_MASK_NONE);
        if (participant == null) {
            shutdown(participant);
            throw new ApplicationException("create_participant error");
        }

        // --- Create publisher --- //

        /* Start - modifying the generated example to showcase the usage of
         * the get_publishers API
         */

        /* We create 2 publishers */
        DDS.Publisher publisher = participant.create_publisher(
        DDS.DomainParticipant.PUBLISHER_QOS_DEFAULT,
        null /* listener */,
        DDS.StatusMask.STATUS_MASK_NONE);
        if (publisher == null) {
            shutdown(participant);
            throw new ApplicationException("create_publisher error");
        }

        /* We use the publisher.GetHashCode() to identify the publisher ID */
        Console.WriteLine("The first publishers is " + publisher.GetHashCode());

        DDS.Publisher publisher2 = participant.create_publisher(
        DDS.DomainParticipant.PUBLISHER_QOS_DEFAULT,
        null /* listener */,
        DDS.StatusMask.STATUS_MASK_NONE);
        if (publisher2 == null)
        {
            shutdown(participant);
            throw new ApplicationException("create_publisher2 error");
        }

        Console.WriteLine("The second publishers is " + publisher2.GetHashCode());
        Console.WriteLine("Let's call get_publisher() now and check if " +
                          "I get all my publishers...");

        DDS.PublisherSeq publisherSeq = new DDS.PublisherSeq();

        participant.get_publishers(publisherSeq);

        for (int count=0; count < publisherSeq.length; ++count) {
            DDS.Publisher tmp = publisherSeq.get_at(count);
            Console.WriteLine("The {0} publisher I found is: {1}",
                        count, tmp.GetHashCode());
        
        }

        /*
        try {
            Foo_writer.unregister_instance(
                instance, ref instance_handle);
        } catch(DDS.Exception e) {
            Console.WriteLine("unregister instance error: {0}", e);
        }
        */

        // --- Shutdown --- //

        /* Delete all entities */
        shutdown(participant);
    }

    static void shutdown(
        DDS.DomainParticipant participant) {

        /* Delete all entities */

        if (participant != null) {
            participant.delete_contained_entities();
            DDS.DomainParticipantFactory.get_instance().delete_participant(
                ref participant);
        }

        /* RTI Connext provides finalize_instance() method on
           domain participant factory for people who want to release memory
           used by the participant factory. Uncomment the following block of
           code for clean destruction of the singleton. */
        /*
        try {
            DDS.DomainParticipantFactory.finalize_instance();
        } catch (DDS.Exception e) {
            Console.WriteLine("finalize_instance error: {0}", e);
            throw e;
        }
        */
    }
}

