/* keys_publisher.cxx

A publication of data of type keys

This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language C++ -example <arch> keys.idl

Example publication of type keys automatically generated by 
'rtiddsgen'. To test them follow these steps:

(1) Compile this file and the example subscription.

(2) Start the subscription with the command
objs/<arch>/keys_subscriber <domain_id> <sample_count>

(3) Start the publication with the command
objs/<arch>/keys_publisher <domain_id> <sample_count>

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS. 

You can run any number of publishers and subscribers programs, and can 
add and remove them dynamically from the domain.


Example:

To run the example application on domain <domain_id>:

On Unix: 

objs/<arch>/keys_publisher <domain_id> o
objs/<arch>/keys_subscriber <domain_id> 

On Windows:

objs\<arch>\keys_publisher <domain_id>  
objs\<arch>\keys_subscriber <domain_id>    


modification history
------------ -------       
*/

#include <stdio.h>
#include <stdlib.h>
#ifdef RTI_VX653
#include <vThreadsData.h>
#endif
#include "keys.h"
#include "keysSupport.h"
#include "ndds/ndds_cpp.h"

/* Delete all entities */
static int publisher_shutdown(
    DDSDomainParticipant *participant)
{
    DDS_ReturnCode_t retcode;
    int status = 0;

    if (participant != NULL) {
        retcode = participant->delete_contained_entities();
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_contained_entities error %d\n", retcode);
            status = -1;
        }

        retcode = DDSTheParticipantFactory->delete_participant(participant);
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_participant error %d\n", retcode);
            status = -1;
        }
    }

    /* RTI Connext provides finalize_instance() method on
    domain participant factory for people who want to release memory used
    by the participant factory. Uncomment the following block of code for
    clean destruction of the singleton. */
    /*
    retcode = DDSDomainParticipantFactory::finalize_instance();
    if (retcode != DDS_RETCODE_OK) {
    printf("finalize_instance error %d\n", retcode);
    status = -1;
    }
    */

    return status;
}

extern "C" int publisher_main(int domainId, int sample_count)
{
    DDSDomainParticipant *participant = NULL;
    DDSPublisher *publisher = NULL;
    DDSTopic *topic = NULL;
    DDSDataWriter *writer = NULL;
    keysDataWriter * keys_writer = NULL;

    /* Creates three instances */
    keys* instance[3] = {NULL, NULL, NULL};
    /* Creates three handles for managing the registrations */
    DDS_InstanceHandle_t handle[3] = {DDS_HANDLE_NIL, DDS_HANDLE_NIL, DDS_HANDLE_NIL};
    /* We only will send data over the instances marked as active */
    int active[3] = {1, 0, 0};

    DDS_ReturnCode_t retcode;
    const char *type_name = NULL;
    int count = 0;  
    DDS_Duration_t send_period = {1,0};

    /* To customize participant QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    participant = DDSTheParticipantFactory->create_participant(
        domainId, DDS_PARTICIPANT_QOS_DEFAULT, 
        NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (participant == NULL) {
        printf("create_participant error\n");
        publisher_shutdown(participant);
        return -1;
    }

    /* To customize publisher QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    publisher = participant->create_publisher(
        DDS_PUBLISHER_QOS_DEFAULT, NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (publisher == NULL) {
        printf("create_publisher error\n");
        publisher_shutdown(participant);
        return -1;
    }

    /* Register type before creating topic */
    type_name = keysTypeSupport::get_type_name();
    retcode = keysTypeSupport::register_type(
        participant, type_name);
    if (retcode != DDS_RETCODE_OK) {
        printf("register_type error %d\n", retcode);
        publisher_shutdown(participant);
        return -1;
    }

    /* To customize topic QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    topic = participant->create_topic(
        "Example keys",
        type_name, DDS_TOPIC_QOS_DEFAULT, NULL /* listener */,
        DDS_STATUS_MASK_NONE);
    if (topic == NULL) {
        printf("create_topic error\n");
        publisher_shutdown(participant);
        return -1;
    }

    /* To customize data writer QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    writer = publisher->create_datawriter(
        topic, DDS_DATAWRITER_QOS_DEFAULT, NULL /* listener */,
        DDS_STATUS_MASK_NONE);
    if (writer == NULL) {
        printf("create_datawriter error\n");
        publisher_shutdown(participant);
        return -1;
    }

    /* If you want to set the writer_data_lifecycle QoS settings
    * programmatically rather than using the XML, you will need to add
    * the following lines to your code and comment out the create_datawriter
    * call above.
    */

    /*
    DDS_DataWriterQos datawriter_qos;
    retcode = publisher->get_default_datawriter_qos(datawriter_qos);
    if (retcode != DDS_RETCODE_OK) {
    printf("get_default_datawriter_qos error\n");
    return -1;
    }

    datawriter_qos.writer_data_lifecycle.autodispose_unregistered_instances = DDS_BOOLEAN_FALSE;

    writer = publisher->create_datawriter(
    topic, datawriter_qos, NULL,
    DDS_STATUS_MASK_NONE);
    if (writer == NULL) {
    printf("create_datawriter error\n");
    publisher_shutdown(participant);
    return -1;
    }
    */

    keys_writer = keysDataWriter::narrow(writer);
    if (keys_writer == NULL) {
        printf("DataWriter narrow error\n");
        publisher_shutdown(participant);
        return -1;
    }

    /* Create data samples for writing */
    instance[0] = keysTypeSupport::create_data();
    instance[1] = keysTypeSupport::create_data();
    instance[2] = keysTypeSupport::create_data();

    if (instance[0] == NULL || instance[1] == NULL || instance[2] == NULL) {
        printf("keysTypeSupport::create_data error\n");
        publisher_shutdown(participant);
        return -1;
    }

    /* RTI Connext could examine the key fields each time it needs to determine
    * which data-instance is being modified.
    * However, for performance and semantic reasons, it is better
    * for your application to declare all the data-instances it intends to
    * modify prior to actually writing any samples. This is known as registration.
    */

    /* In order to register the instances, we must set their associated keys first */
    instance[0]->code = 0;
    instance[1]->code = 1;
    instance[2]->code = 2;

    /* The keys must have been set before making this call */
    printf("Registering instance %d\n", instance[0]->code);
    handle[0] = keys_writer->register_instance(*instance[0]);

    /* Modify the data to be sent here */
    instance[0]->x = 1000;
    instance[1]->x = 2000;
    instance[2]->x = 3000;

    /* Main loop */
    for (count=0; (sample_count == 0) || (count < sample_count); ++count) {
        NDDSUtility::sleep(send_period);

        switch (count) {
        case 5: { /* Start sending the second and third instances */
            printf("----Registering instance %d\n", instance[1]->code);
            printf("----Registering instance %d\n", instance[2]->code);
            handle[1] = keys_writer->register_instance(*instance[1]);
            handle[2] = keys_writer->register_instance(*instance[2]);
            active[1] = 1;
            active[2] = 1;
                } break;
        case 10: { /* Unregister the second instance */
            printf("----Unregistering instance %d\n", instance[1]->code);
            retcode = keys_writer->unregister_instance(*instance[1], handle[1]);
            if (retcode != DDS_RETCODE_OK) {
                printf("unregister instance error %d\n", retcode);
                return -1;
            }
            active[1] = 0;
                 } break;
        case 15: { /* Dispose the third instance */
            printf("----Disposing \\instance %d\n", instance[2]->code);
            retcode = keys_writer->dispose(*instance[2], handle[2]);
            if (retcode != DDS_RETCODE_OK) {
                printf("dispose instance error %d\n", retcode);
                return -1;
            }
            active[2] = 0;
                 } break;
        }

        /* Modify the data to be sent here */
        instance[0]->y = count;
        instance[1]->y = count;
        instance[2]->y = count;

        for (int i = 0; i < 3; ++i) {
            if (active[i]) {
                printf("Writing instance %d, x: %d, y: %d\n",
                    instance[i]->code, instance[i]->x, instance[i]->y);
                retcode = keys_writer->write(*instance[i], handle[i]);
                if (retcode != DDS_RETCODE_OK) {
                    printf("write error %d\n", retcode);
                    return -1;
                }
            }
        }

    }

    /* Delete data samples */
    for (int i = 0; i < 3; ++i) {
        retcode = keysTypeSupport::delete_data(instance[i]);
        if (retcode != DDS_RETCODE_OK) {
            printf("keysTypeSupport::delete_data error %d\n", retcode);
        }
    }

    /* Delete all entities */
    return publisher_shutdown(participant);
}

#if defined(RTI_WINCE)
int wmain(int argc, wchar_t** argv)
{
    int domainId = 0;
    int sample_count = 0; /* infinite loop */ 

    if (argc >= 2) {
        domainId = _wtoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = _wtoi(argv[2]);
    }

    /* Uncomment this to turn on additional logging
    NDDSConfigLogger::get_instance()->
    set_verbosity_by_category(NDDS_CONFIG_LOG_CATEGORY_API, 
    NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
    */

    return publisher_main(domainId, sample_count);
}

#elif !(defined(RTI_VXWORKS) && !defined(__RTP__)) && !defined(RTI_PSOS)
int main(int argc, char *argv[])
{
    int domainId = 0;
    int sample_count = 0; /* infinite loop */

    if (argc >= 2) {
        domainId = atoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = atoi(argv[2]);
    }

    /* Uncomment this to turn on additional logging
    NDDSConfigLogger::get_instance()->
    set_verbosity_by_category(NDDS_CONFIG_LOG_CATEGORY_API, 
    NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
    */

    return publisher_main(domainId, sample_count);
}
#endif

#ifdef RTI_VX653
const unsigned char* __ctype = *(__ctypePtrGet());

extern "C" void usrAppInit ()
{
#ifdef  USER_APPL_INIT
    USER_APPL_INIT;         /* for backwards compatibility */
#endif

    /* add application specific code here */
    taskSpawn("pub", RTI_OSAPI_THREAD_PRIORITY_NORMAL, 0x8, 0x150000, (FUNCPTR)publisher_main, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

}
#endif

