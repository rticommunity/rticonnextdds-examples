<?xml version="1.0"?>
<!-- 
Description
XML QoS Profile for HelloWorld

The QoS configuration of the DDS entities in the generated example is 
loaded from this file.

This file is used only when it is in the current working directory
or when the enviroment variable
NDDS_QOS_PROFILES is defined and points to this file.

For more information about XML QoS Profiles see Chapter 15 in the 
RTI Connext user manual.
-->
<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:noNamespaceSchemaLocation="/home/rticonnext/RTI/ndds.5.0.0/scripts/../resource/rtiddsgen/../qos_profiles_5.0.0/schema/rti_dds_qos_profiles.xsd"
     version="5.0.0">
    <!-- QoS Library containing the QoS profile used in the generated example.

        A QoS library is a named set of QoS profiles.
    -->
    <qos_library name="HelloWorld_Library">

        <!-- QoS profile used to configure reliable communication between the DataWriter 
             and DataReader created in the example code.

             A QoS profile groups a set of related QoS.
        -->
        <qos_profile name="HighestPriorityFirst_Profile" is_default_qos="true">
            <!-- QoS used to configure a High Priority Flow in the example code --> 

            <participant_qos>
                <!--
                The participant name, if it is set, will be displayed in the
                RTI Analyzer tool, making it easier for you to tell one
                application from another when you're debugging.
                -->
                <participant_name>
                    <name>RTI "Hello, World - Highest Priority First" Example</name>
                </participant_name>
               
                <resource_limits>
                    <participant_property_string_max_length>4096</participant_property_string_max_length>
                    <type_object_max_serialized_length>8192</type_object_max_serialized_length>
                </resource_limits>

				<!-- Increase to the the maximum message size allowed by UDP (64k) -->
                <receiver_pool>
                    <buffer_size>65530</buffer_size>
                </receiver_pool>
                
                <property>
                    <value>
                    	<!-- Increase to the the maximum message size allowed by UDP (64k) 
                    	
                    	     For increasing tuning your OS, please refer to: 
                         	  http://community.rti.com/best-practices/tune-your-os-performance
                    	-->
                    	<!-- UDPv4 transport -->
                        <element>
                            <name>dds.transport.UDPv4.builtin.parent.message_size_max</name>
                            <value>65507</value>
                        </element>
                        <element>
                            <name>dds.transport.UDPv4.builtin.send_socket_buffer_size</name>
                            <value>131072</value>
                        </element>
                        <element>
                            <name>dds.transport.UDPv4.builtin.recv_socket_buffer_size</name>
                            <value>131072</value>
                        </element>
                        <!-- UDPv6 transport -->
                        <element>
                            <name>dds.transport.UDPv6.builtin.parent.message_size_max</name>
                            <value>65507</value>
                        </element>
                        <element>
                            <name>dds.transport.UDPv6.builtin.send_socket_buffer_size</name>
                            <value>131072</value>
                        </element>
                        <element>
                            <name>dds.transport.UDPv6.builtin.recv_socket_buffer_size</name>
                            <value>131072</value>
                        </element>
                        <!-- Shmem transport -->
                        <element>
                            <name>dds.transport.shmem.builtin.parent.message_size_max</name>
                            <value>65536</value>
                        </element>
                        <element>
                            <name>dds.transport.shmem.builtin.receive_buffer_size</name>
                            <value>1048576</value>
                        </element>
                        <element>
                            <name>dds.transport.shmem.builtin.received_message_count_max</name>
                            <value>64</value>
                        </element>


                         <!-- Increase the gather_send_buffer_count_max to the maximum your OS can support
                         	  to increase the coalescing of messages to a given destination. It should
                         	  also improve discovery performance.
                         	   
                         	  For UDPv4 the default setting is 16. The max allowed is 128.
                         	                          	     
                         	  Ref: User's Manual, Section 15.6.2:
                         	       Setting the Maximum Gather-Send Buffer Count for UDPv4 and UDPv6
                          -->
                         <element>
                            <name> dds.transport.UDPv4.builtin.parent.gather_send_buffer_count_max</name>
                            <value>128</value>
                        </element>
                         <element>
                            <name> dds.transport.UDPv6.builtin.parent.gather_send_buffer_count_max</name>
                            <value>128</value>
                        </element>                        
                         <element>
                            <name> dds.transport.shmem.builtin.parent.gather_send_buffer_count_max</name>
                            <value>128</value>
                        </element>
                        
                        
                        
                        
						<!-- Highest-Priority-First Flow Controller -->
                        <element>
                            <name>dds.flow_controller.token_bucket.priority_flow.scheduling_policy</name>
                            <value>DDS_HPF_FLOW_CONTROLLER_SCHED_POLICY</value>
                        </element>
                     	<!-- The next set of parameters defines an example flow:
                             - Using 8Kb tokens, a 1M sample will take 128 tokens.
						     - Setup for 100 MB/sec (838 Mb/sec) 
					     -->
                        <element>
                            <name>dds.flow_controller.token_bucket.priority_flow.token_bucket.max_tokens</name>
                            <value>128</value>
                        </element>
                        <element>
                            <name>dds.flow_controller.token_bucket.priority_flow.token_bucket.tokens_added_per_period</name>
                            <value>128</value>
                        </element>
                        <element>
                            <name>dds.flow_controller.token_bucket.priority_flow.token_bucket.bytes_per_token</name>
                            <value>8192</value>
                        </element>
                        <element>
                            <name>dds.flow_controller.token_bucket.priority_flow.token_bucket.period.sec</name>
                            <value>0</value>
                        </element>
                        <element>
                            <name>dds.flow_controller.token_bucket.priority_flow.token_bucket.period.nanosec</name>
                            <value>10000000</value>
                        </element>
                    </value>
                </property>
            </participant_qos>
                                       
            <datawriter_qos>
            
                <publish_mode>
                    <kind>ASYNCHRONOUS_PUBLISH_MODE_QOS</kind>
                    <flow_controller_name>dds.flow_controller.token_bucket.priority_flow</flow_controller_name>
 					   
 					<!-- DataWriter priority - larger number is higher priority --> 
 					<priority>10</priority>
                </publish_mode>
                
                <reliability>
                    <kind>RELIABLE_RELIABILITY_QOS</kind>
                    <max_blocking_time>
                        <sec>5</sec>
                        <nanosec>0</nanosec>
                    </max_blocking_time>
                </reliability>                

                <history>
                    <kind>KEEP_ALL_HISTORY_QOS</kind>
                </history>

                <resource_limits>
                    <!-- Only initially allocate 1 sample because the samples
                         are large -->
                    <initial_samples>1</initial_samples>
                </resource_limits>
                <protocol>
                    <rtps_reliable_writer>
                        <max_send_window_size>10</max_send_window_size>
                        <min_send_window_size>10</min_send_window_size>
                        <heartbeats_per_max_samples>10</heartbeats_per_max_samples>
                        
                        <!-- See low_watermark --> 
                        <heartbeat_period>
                            <sec>0</sec>
                            <nanosec>200000000</nanosec>
                        </heartbeat_period>
                        <!-- See high_watermark --> 
                        <fast_heartbeat_period>
                            <sec>0</sec>
                            <nanosec>20000000</nanosec>
                        </fast_heartbeat_period>
                        <late_joiner_heartbeat_period>
                            <sec>0</sec>
                            <nanosec>20000000</nanosec>
                        </late_joiner_heartbeat_period>
                        <max_nack_response_delay>
                            <sec>0</sec>
                            <nanosec>0</nanosec>
                        </max_nack_response_delay>
                        <!-- When the number of unacknowledged samples reaches
                             the high_watermark, the fast_heartbeat_period is
                             used --> 
                        <high_watermark>25</high_watermark>
                        <!-- When the number of unacknowledged samples dips
                             below the low_watermark, the heartbeat_period is
                             used --> 
                        <low_watermark>10</low_watermark>
                        <!-- The maximum number of heartbeat retries before a
                             remote DataReader is marked as inactive -->
                        <max_heartbeat_retries>500</max_heartbeat_retries>                        
                    </rtps_reliable_writer>
                </protocol>
            
                <property>
                    <value>
                        <!--
                          The next setting is used to force dynamic memory
                          allocation for samples with a serialized size of 
                          larger than 32K. Without setting 
                          pool_buffer_max_size, all memory would be obtained
                          from a pre-allocated pool, which would greatly 
                          increase the memory usage in an application which 
                          sends large data.
                        -->
                        <element>
                            <name>dds.data_writer.history.memory_manager.fast_pool.pool_buffer_max_size</name>
                            <value>32768</value>
                        </element>
                   </value>
                </property>

            </datawriter_qos>

            <!-- QoS used to configure the data reader created in the example code -->                
            <datareader_qos>

                <reliability>
                    <kind>RELIABLE_RELIABILITY_QOS</kind>
                </reliability>
 
                <protocol>
                    <rtps_reliable_reader>
                        <min_heartbeat_response_delay>
                            <sec>0</sec>
                            <nanosec>0</nanosec>
                        </min_heartbeat_response_delay>
                        <max_heartbeat_response_delay>
                            <sec>0</sec>
                            <nanosec>0</nanosec>
                        </max_heartbeat_response_delay>
                    </rtps_reliable_reader>
                </protocol>
                
                <history>
                    <kind>KEEP_ALL_HISTORY_QOS</kind>
                </history>
                
                <resource_limits>
                    <initial_samples>1</initial_samples>
                    <!-- We limit max_samples on the reader so that if the
                         writer is publishing samples faster than the reader is
                         taking them then the reader will start sending NACKs
                         for samples received after the number of samples in 
                         its queue reaches max_samples. This behavior will put
                         pressure on the writer to throttle back its publishing
                         speed. -->
                    <max_samples>20</max_samples>
                </resource_limits>       

                <reader_resource_limits>
                    <!-- Determines whether the DataReader pre-allocates
                         storage for storing fragmented samples. This setting
                         can be used to limit upfront memory allocation costs
                         in applications which are dealing with large data -->
                    <dynamically_allocate_fragmented_samples>true</dynamically_allocate_fragmented_samples>
                </reader_resource_limits>

            </datareader_qos>

        </qos_profile>

    </qos_library>
</dds>
