using System;
using System.Collections.Generic;
using System.Text;
/* listeners_subscriber.cs

   A subscription example

   This file is derived from code automatically generated by the rtiddsgen 
   command:

   rtiddsgen -language C# -example <arch> listeners.idl

   Example subscription of type listeners automatically generated by 
   'rtiddsgen'. To test them, follow these steps:

   (1) Compile this file and the example publication.

   (2) Start the subscription with the command
       objs\<arch>\listeners_subscriber <domain_id> <sample_count>

   (3) Start the publication with the command
       objs\<arch>\listeners_publisher <domain_id> <sample_count>

   (4) [Optional] Specify the list of discovery initial peers and 
       multicast receive addresses via an environment variable or a file 
       (in the current working directory) called NDDS_DISCOVERY_PEERS. 

   You can run any number of publishers and subscribers programs, and can 
   add and remove them dynamically from the domain.
                                   
   Example:
        
       To run the example application on domain <domain_id>:
                          
       bin\<Debug|Release>\listeners_publisher <domain_id> <sample_count>  
       bin\<Debug|Release>\listeners_subscriber <domain_id> <sample_count>
              
       
modification history
------------ -------
*/



public class listenersSubscriber {
    /* Create Participant Listener Class */
    public class ParticipantListener : DDS.DomainParticipantListener
    {
        public override void on_requested_deadline_missed(
            DDS.DataReader reader,
            ref DDS.RequestedDeadlineMissedStatus status)
        {
            Console.WriteLine("ParticipantListener: on_requested_deadline_missed()");
        }

        public override void on_requested_incompatible_qos(
            DDS.DataReader reader,
            DDS.RequestedIncompatibleQosStatus status)
        {
            Console.WriteLine("ParticipantListener: on_requested_incompatible_qos()");
        }

        public override void on_sample_rejected(
            DDS.DataReader reader,
            ref DDS.SampleRejectedStatus status)
        {
            Console.WriteLine("ParticipantListener: on_sample_rejected()");
        }

        public override void on_liveliness_changed(
            DDS.DataReader reader,
            ref DDS.LivelinessChangedStatus status)
        {
            Console.WriteLine("ParticipantListener: on_liveliness_changed()\n");
        }

        public override void on_sample_lost(
            DDS.DataReader reader,
            ref DDS.SampleLostStatus status)
        {
            Console.WriteLine("ParticipantListener: on_sample_lost()");
        }

        public override void on_subscription_matched(
            DDS.DataReader reader,
            ref DDS.SubscriptionMatchedStatus status)
        {
            Console.WriteLine("ParticipantListener: on_subscription_matched()");
        }

        public override void on_data_available(
            DDS.DataReader reader)
        {
            Console.WriteLine("ParticipantListener: on_data_available()");
        }

        public override void on_data_on_readers(
            DDS.Subscriber subscriber)
        {
            Console.WriteLine("ParticipantListener: on_data_on_readers()");
            // notify_datareaders() only calls on_data_available for
            // DataReaders with unread samples
            try
            {
                subscriber.notify_datareaders();
            }
            catch (DDS.Exception e)
            {
                Console.WriteLine("notify_datareaders() error: {0}", e);
            }
        }

        public override void on_inconsistent_topic(
            DDS.Topic topic,
            ref DDS.InconsistentTopicStatus status)
        {
            Console.WriteLine("ParticipantListener: on_inconsistent_topic()");

        }
    };

    /* Create Subscriber Listener class */
    public class SubscriberListener : DDS.SubscriberListener
    {
        public override void on_requested_deadline_missed(
            DDS.DataReader reader,
            ref DDS.RequestedDeadlineMissedStatus status)
        {
            Console.WriteLine("SubscriberListener: on_requested_deadline_missed()");
        }

        public override void on_requested_incompatible_qos(
            DDS.DataReader reader,
            DDS.RequestedIncompatibleQosStatus status)
        {
            Console.WriteLine("SubscriberListener: on_requested_incompatible_qos()");
        }

        public override void on_sample_rejected(
            DDS.DataReader reader,
            ref DDS.SampleRejectedStatus status)
        {
            Console.WriteLine("SubscriberListener: on_sample_rejected()");
        }

        public override void on_liveliness_changed(
            DDS.DataReader reader,
            ref DDS.LivelinessChangedStatus status)
        {
            Console.WriteLine("SubscriberListener: on_liveliness_changed()\n");
        }

        public override void on_sample_lost(
            DDS.DataReader reader,
            ref DDS.SampleLostStatus status)
        {
            Console.WriteLine("SubscriberListener: on_sample_lost()");
        }

        public override void on_subscription_matched(
            DDS.DataReader reader,
            ref DDS.SubscriptionMatchedStatus status)
        {
            Console.WriteLine("SubscriberListener: on_subscription_matched()");
        }

        public override void on_data_available(
            DDS.DataReader reader)
        {
            Console.WriteLine("SubscriberListener: on_data_available()");
        }

        public override void on_data_on_readers(
            DDS.Subscriber subscriber)
        {
            //static int count = 0;
            Console.WriteLine("SubscriberListener: on_data_on_readers()");
            
            // notify_datareaders() only calls on_data_available for
            // DataReaders with unread samples
            try
            {
                subscriber.notify_datareaders();

                if (++count > 3)
                {
                    DDS.StatusMask newmask = DDS.StatusMask.STATUS_MASK_ALL;
                    // 'Unmask' DATA_ON_READERS status for listener
                    int tempMask = (int)newmask;
                    DDS.StatusKind tempStatusKind = DDS.StatusKind.DATA_ON_READERS_STATUS; ;
                    int dataOnReaders_mask = (int)tempStatusKind;
                    tempMask = ~(dataOnReaders_mask & tempMask);
                    newmask = (DDS.StatusMask)tempMask;
                    subscriber.set_listener(this, newmask);
                    Console.WriteLine("Unregistering SubscriberListener::on_data_on_readers()");
                }

            }
            catch (DDS.Exception e)
            {
                Console.WriteLine("notify_datareaders() error: {0}", e);
            }
        }

        private int count = 0;
    };

    public class ReaderListener : DDS.DataReaderListener
    {

        public override void on_requested_deadline_missed(
            DDS.DataReader reader,
            ref DDS.RequestedDeadlineMissedStatus status)
        {
            Console.WriteLine("ReaderListener: on_requested_deadline_missed()");
        }

        public override void on_requested_incompatible_qos(
            DDS.DataReader reader,
            DDS.RequestedIncompatibleQosStatus status)
        {
            Console.WriteLine("ReaderListener: on_requested_incompatible_qos()");
        }

        public override void on_sample_rejected(
            DDS.DataReader reader,
            ref DDS.SampleRejectedStatus status)
        {
            Console.WriteLine("ReaderListener: on_sample_rejected()");
        }

        public override void on_liveliness_changed(
            DDS.DataReader reader,
            ref DDS.LivelinessChangedStatus status)
        {
            Console.WriteLine("ReaderListener: on_liveliness_changed()");
            Console.WriteLine("  Alive writers: {0}", status.alive_count);
        }

        public override void on_sample_lost(
            DDS.DataReader reader,
            ref DDS.SampleLostStatus status)
        {
            Console.WriteLine("ReaderListener: on_sample_lost()\n");
        }

        public override void on_subscription_matched(
            DDS.DataReader reader,
            ref DDS.SubscriptionMatchedStatus status)
        {
            Console.WriteLine("ReaderListener: on_subscription_matched()");
        }

        public override void on_data_available(DDS.DataReader reader)
        {

            Console.WriteLine("ReaderListener: on_data_available()");

            listenersDataReader listeners_reader =
                (listenersDataReader)reader;

            try
            {
                listeners_reader.take(
                    data_seq,
                    info_seq,
                    DDS.ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                    DDS.SampleStateKind.ANY_SAMPLE_STATE,
                    DDS.ViewStateKind.ANY_VIEW_STATE,
                    DDS.InstanceStateKind.ANY_INSTANCE_STATE);
            }
            catch (DDS.Retcode_NoData)
            {
                return;
            }
            catch (DDS.Exception e)
            {
                Console.WriteLine("take error {0}", e);
                return;
            }

            System.Int32 data_length = data_seq.length;
            for (int i = 0; i < data_length; ++i)
            {
                if (info_seq.get_at(i).valid_data)
                {
                    listenersTypeSupport.print_data(data_seq.get_at(i));
                }
                else
                {
                    Console.WriteLine("   Got metadata");
                }
            }

            try
            {
                listeners_reader.return_loan(data_seq, info_seq);
            }
            catch (DDS.Exception e)
            {
                Console.WriteLine("return loan error {0}", e);
            }
        }

        public ReaderListener()
        {
            data_seq = new listenersSeq();
            info_seq = new DDS.SampleInfoSeq();
        }

        private listenersSeq data_seq;
        private DDS.SampleInfoSeq info_seq;
    };

    /* Create DataWriter Listener Class */

    public static void Main(string[] args) {

        // --- Get domain ID --- //
        int domain_id = 0;
        if (args.Length >= 1) {
            domain_id = Int32.Parse(args[0]);
        }

        // --- Get max loop count; 0 means infinite loop  --- //
        int sample_count = 0;
        if (args.Length >= 2) {
            sample_count = Int32.Parse(args[1]);
        }

        /* Uncomment this to turn on additional logging
        NDDS.ConfigLogger.get_instance().set_verbosity_by_category(
            NDDS.LogCategory.NDDS_CONFIG_LOG_CATEGORY_API, 
            NDDS.LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
        */

        // --- Run --- //
        try {
            listenersSubscriber.subscribe(
                domain_id, sample_count);
        }
        catch(DDS.Exception) {
            Console.WriteLine("error in subscriber");
        }
    }

    static void subscribe(int domain_id, int sample_count) {

        // --- Create participant --- //

        /* Create participant listener */
        ParticipantListener participant_listener = new ParticipantListener();

        /* We associate the participant_listener to the participant and set the 
         * status mask to get all the statuses */
        DDS.DomainParticipant participant =
            DDS.DomainParticipantFactory.get_instance().create_participant(
                domain_id,
                DDS.DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT, 
                participant_listener /* listener */,
                DDS.StatusMask.STATUS_MASK_ALL /* get all statuses */);
        if (participant == null) {
            shutdown(participant);
            participant_listener = null;
            throw new ApplicationException("create_participant error");
        }

        // --- Create subscriber --- //

        /* Create subscriber listener */
        SubscriberListener subscriber_listener = new SubscriberListener();

        /* Here we associate the subscriber listener to the subscriber and set the 
         * status mask to get all the statuses */
        DDS.Subscriber subscriber = participant.create_subscriber(
            DDS.DomainParticipant.SUBSCRIBER_QOS_DEFAULT,
            subscriber_listener /* listener */,
            DDS.StatusMask.STATUS_MASK_ALL /* get all statuses */);
        if (subscriber == null) {
            shutdown(participant);
            participant_listener = null;
            subscriber_listener = null;
            throw new ApplicationException("create_subscriber error");
        }

        // --- Create topic --- //

        /* Register the type before creating the topic */
        System.String type_name = listenersTypeSupport.get_type_name();
        try {
            listenersTypeSupport.register_type(
                participant, type_name);
        }
        catch(DDS.Exception e) {
            Console.WriteLine("register_type error {0}", e);
            shutdown(participant);
            participant_listener = null;
            subscriber_listener = null;
            throw e;
        }

        /* To customize the topic QoS, use 
           the configuration file USER_QOS_PROFILES.xml */
        DDS.Topic topic = participant.create_topic(
            "Example listeners",
            type_name,
            DDS.DomainParticipant.TOPIC_QOS_DEFAULT,
            null /* listener */,
            DDS.StatusMask.STATUS_MASK_NONE);
        if (topic == null) {
            shutdown(participant);
            participant_listener = null;
            subscriber_listener = null;
            throw new ApplicationException("create_topic error");
        }

        // --- Create reader --- //

        /* Create a data reader listener */
        ReaderListener reader_listener = new ReaderListener();

        /* Create Status mask to listen just LIVELINESS_CHANGED_STATUS and 
         * DATA_AVAILABLE_STATUS */
        int liveliness_changed_mask = (int)DDS.StatusKind.LIVELINESS_CHANGED_STATUS;
        int data_available_changed_mask = (int)DDS.StatusKind.DATA_AVAILABLE_STATUS;
        data_available_changed_mask |= liveliness_changed_mask;
        DDS.StatusMask combined_status_mask = (DDS.StatusMask)data_available_changed_mask;

        /* Here we associate the data reader listener to the reader.
         * We just listen for liveliness changed and data available,
         * since most specific listeners will get called. */
        DDS.DataReader reader = subscriber.create_datareader(
            topic,
            DDS.Subscriber.DATAREADER_QOS_DEFAULT,
            reader_listener,
            combined_status_mask);
        if (reader == null) {
            shutdown(participant);
            participant_listener = null;
            subscriber_listener = null;
            reader_listener = null;
            throw new ApplicationException("create_datareader error");
        }

        // --- Wait for data --- //

        /* Main loop */
        const System.Int32 receive_period = 1000; // milliseconds
        for (int count=0;
             (sample_count == 0) || (count < sample_count);
             ++count) {
            System.Threading.Thread.Sleep(receive_period);
        }

        // --- Shutdown --- //

        /* Delete all entities */
        shutdown(participant);
        participant_listener = null;
        subscriber_listener = null;
        reader_listener = null;
    }


    static void shutdown(
        DDS.DomainParticipant participant) {

        /* Delete all entities */

        if (participant != null) {
            participant.delete_contained_entities();
            DDS.DomainParticipantFactory.get_instance().delete_participant(
                ref participant);
        }

        /* RTI Connext provides finalize_instance() method on
           domain participant factory for users who want to release memory
           used by the participant factory. Uncomment the following block of
           code for clean destruction of the singleton. */
        /*
        try {
            DDS.DomainParticipantFactory.finalize_instance();
        }
        catch(DDS.Exception e) {
            Console.WriteLine("finalize_instance error {0}", e);
            throw e;
        }
        */
    }
}


