/* msg_subscriber.cxx

   A subscription example

   This file is derived from code automatically generated by the rtiddsgen 
   command:

   rtiddsgen -language C++ -example <arch> msg.idl

   Example subscription of type msg automatically generated by 
   'rtiddsgen'. To test them follow these steps:

   (1) Compile this file and the example publication.

   (2) Start the subscription on the same domain used for RTI Data Distribution
       Service with the command
       objs/<arch>/msg_subscriber <domain_id> <sample_count>

   (3) Start the publication on the same domain used for RTI Data Distribution
       with the command
       objs/<arch>/msg_publisher <domain_id> <sample_count>

   (4) [Optional] Specify the list of discovery initial peers and 
       multicast receive addresses via an environment variable or a file 
       (in the current working directory) called NDDS_DISCOVERY_PEERS. 
       
   You can run any number of publishers and subscribers programs, and can 
   add and remove them dynamically from the domain.
              
                                   
   Example:
        
       To run the example application on domain <domain_id>:
                          
       On Unix: 
       
       objs/<arch>/msg_publisher <domain_id> 
       objs/<arch>/msg_subscriber <domain_id> 
                            
       On Windows:
       
       objs\<arch>\msg_publisher <domain_id>  
       objs\<arch>\msg_subscriber <domain_id>   
              
       
modification history
------------ -------
* Set user_data QoS fields in participant and datareader with 
  strings given on command line
* Updated for 4.1 to 4.2: participant_index changed to participant_id
*/

#include <stdio.h>
#include <stdlib.h>
#include "ndds/ndds_cpp.h"
#include "msg.h"
#include "msgSupport.h"

// UNCOMMENT THE FOLLOWING LINE IF YOU ARE USING RTI DATA DISTRIBUTION SERVICE 4.1 OR EARLIER
//#define RTI_4_1

class msgListener : public DDSDataReaderListener {
  public:
    virtual void on_requested_deadline_missed(
        DDSDataReader* /*reader*/,
        const DDS_RequestedDeadlineMissedStatus& /*status*/) {}
    
    virtual void on_requested_incompatible_qos(
        DDSDataReader* /*reader*/,
        const DDS_RequestedIncompatibleQosStatus& /*status*/) {}
    
    virtual void on_sample_rejected(
        DDSDataReader* /*reader*/,
        const DDS_SampleRejectedStatus& /*status*/) {}

    virtual void on_liveliness_changed(
        DDSDataReader* /*reader*/,
        const DDS_LivelinessChangedStatus& /*status*/) {}

    virtual void on_sample_lost(
        DDSDataReader* /*reader*/,
        const DDS_SampleLostStatus& /*status*/) {}

    virtual void on_subscription_matched(
        DDSDataReader* /*reader*/,
        const DDS_SubscriptionMatchedStatus& /*status*/) {}

    virtual void on_data_available(DDSDataReader* reader);
};

void msgListener::on_data_available(DDSDataReader* reader)
{
    msgDataReader *msg_reader = NULL;
    msgSeq data_seq;
    DDS_SampleInfoSeq info_seq;
    DDS_ReturnCode_t retcode;
    int i;

    msg_reader = msgDataReader::narrow(reader);
    if (msg_reader == NULL) {
        printf("DataReader narrow error\n");
        return;
    }

    retcode = msg_reader->take(
        data_seq, info_seq, DDS_LENGTH_UNLIMITED,
        DDS_ANY_SAMPLE_STATE, DDS_ANY_VIEW_STATE, DDS_ANY_INSTANCE_STATE);

    if (retcode == DDS_RETCODE_NO_DATA) {
        return;
    } else if (retcode != DDS_RETCODE_OK) {
        printf("take error %d\n", retcode);
        return;
    }

    for (i = 0; i < data_seq.length(); ++i) {
        if (info_seq[i].valid_data) {
            msgTypeSupport::print_data(&data_seq[i]);
        }
    }

    retcode = msg_reader->return_loan(data_seq, info_seq);
    if (retcode != DDS_RETCODE_OK) {
        printf("return loan error %d\n", retcode);
    }
}

class BuiltinParticipantListener : public DDSDataReaderListener {
public:
    virtual void on_data_available(DDSDataReader *reader);
};

/* Delete all entities */
static int subscriber_shutdown(
    DDSDomainParticipant *participant)
{
    DDS_ReturnCode_t retcode;
    int status = 0;

    if (participant != NULL) {
        retcode = participant->delete_contained_entities();
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_contained_entities error %d\n", retcode);
            status = -1;
        }

        retcode = DDSTheParticipantFactory->delete_participant(participant);
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_participant error %d\n", retcode);
            status = -1;
        }
    }

    /* RTI Data Distribution Service provides finalize_instance() method for
       people who want to release memory used by the participant factory
       singleton. Uncomment the following block of code for clean destruction of
       the participant factory singleton. */
/*
  retcode = DDSDomainParticipantFactory::finalize_instance();
  if (retcode != DDS_RETCODE_OK) {
  printf("finalize_instance error %d\n", retcode);
  status = -1;
  }
*/
    return status;
}

extern "C" int subscriber_main(int domainId, int sample_count,
                               char *participant_auth, char *reader_auth)
{
    DDSDomainParticipant *participant = NULL;
    DDSSubscriber *subscriber = NULL;
    DDSTopic *topic = NULL;
    msgListener *reader_listener = NULL; 
    DDSDataReader *reader = NULL;
    DDS_ReturnCode_t retcode;
    const char *type_name = NULL;
    int count = 0;
    struct DDS_Duration_t receive_period = {1,0};
    int status = 0;

    //// Start changes for Builtin_Topics
    // Set user_data qos field for participant

    /* Get default participant QoS to customize */
    DDS_DomainParticipantQos participant_qos;
    retcode = DDSTheParticipantFactory->get_default_participant_qos(participant_qos);
    if (retcode != DDS_RETCODE_OK) {
        printf("get_default_participant_qos error\n");
        return -1;
    }

    DDS_StringSeq temp(0);
    participant_qos.discovery.multicast_receive_addresses = temp;

    // user_data is opaque to DDS, so we include trailing \0 for string
    int len = strlen(participant_auth) + 1;
    int max = participant_qos.resource_limits.participant_user_data_max_length;

    if (len > max) {
        printf("error, participant user_data exceeds resource limits\n");
    } else {
        // DDS_Octet is defined to be 8 bits.  If chars are not 8 bits
        // on your system, this will not work.
        participant_qos.user_data.value.from_array(
            reinterpret_cast<const DDS_Octet*>(participant_auth), len);
    }

    /* To create participant with default QoS, use DDS_PARTICIPANT_QOS_DEFAULT
       instead of participant_qos */
    participant = DDSTheParticipantFactory->create_participant(
        domainId, participant_qos, 
        NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (participant == NULL) {
        printf("create_participant error\n");
        subscriber_shutdown(participant);
        return -1;
    }
	
    /* The participant is disabled by default. We enable it now */
    if (participant->enable() != DDS_RETCODE_OK) {
        printf("***Error: Failed to Enable Participant\n");
        return 0;
    }

    /* To customize subscriber QoS, use
       participant->get_default_subscriber_qos() */
    subscriber = participant->create_subscriber(
        DDS_SUBSCRIBER_QOS_DEFAULT, NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (subscriber == NULL) {
        printf("create_subscriber error\n");
        subscriber_shutdown(participant);
        return -1;
    }

    /* Register type before creating topic */
    type_name = msgTypeSupport::get_type_name();
    retcode = msgTypeSupport::register_type(
        participant, type_name);
    if (retcode != DDS_RETCODE_OK) {
        printf("register_type error %d\n", retcode);
        subscriber_shutdown(participant);
        return -1;
    }

    /* Get default topic QoS to customize */
    DDS_TopicQos topic_qos;
    retcode = participant->get_default_topic_qos(topic_qos);
    if (retcode != DDS_RETCODE_OK) {
        printf("get_default_topic_qos error\n");
        return -1;
    }

    /* To customize topic QoS, use
       participant->get_default_topic_qos() */
    topic = participant->create_topic(
        "Example msg",
        type_name, DDS_TOPIC_QOS_DEFAULT, NULL /* listener */,
        DDS_STATUS_MASK_NONE);
    if (topic == NULL) {
        printf("create_topic error\n");
        subscriber_shutdown(participant);
        return -1;
    }

    /* Create data reader listener */
    reader_listener = new msgListener();
    if (reader_listener ==  NULL) {
        printf("listener instantiation error\n");
        subscriber_shutdown(participant);
        return -1;
    }

    //// Start changes for Builtin_Topics
    // Set user_data qos field for datareader

    /* Get default datareader QoS to customize */
    DDS_DataReaderQos datareader_qos;
    retcode = subscriber->get_default_datareader_qos(datareader_qos);
    if (retcode != DDS_RETCODE_OK) {
        printf("get_default_datareader_qos error\n");
        return -1;
    }

    // user_data is opaque to DDS, so we include trailing \0 for string
    len = strlen(reader_auth) + 1;
    max = participant_qos.resource_limits.reader_user_data_max_length;

    if (len > max) {
        printf("error, datareader user_data exceeds resource limits\n");
    } else {
        // DDS_Octet is defined to be 8 bits.  If chars are not 8 bits
        // on your system, this will not work.
        datareader_qos.user_data.value.from_array(
            reinterpret_cast<const DDS_Octet*>(reader_auth), len);
    }

    /* To create datareader with default QoS, use DDS_DATAREADER_QOS_DEFAULT
       instead of datareader_qos */
    reader = subscriber->create_datareader(
        topic, datareader_qos, reader_listener,
        DDS_STATUS_MASK_ALL);
    if (reader == NULL) {
        printf("create_datareader error\n");
        subscriber_shutdown(participant);
        delete reader_listener;
        return -1;
    }
    //// End changes for Builtin_Topics

    /* Main loop */
    for (count=0; (sample_count == 0) || (count < sample_count); ++count) {

//        printf("msg subscriber sleeping for %d sec...\n",
//               receive_period.sec);

        NDDSUtility::sleep(receive_period);
    }

    /* Delete all entities */
    status = subscriber_shutdown(participant);
    delete reader_listener;

    return status;
}

#if defined(RTI_WINCE)
int wmain(int argc, wchar_t** argv)
{
    int domainId = 0;
    int sample_count = 0; /* infinite loop */ 
    
    if (argc >= 2) {
        domainId = _wtoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = _wtoi(argv[2]);
    }
    
    /* Uncomment this to turn on additional logging
    NDDSConfigLogger::get_instance()->
        set_verbosity_by_category(NDDS_CONFIG_LOG_CATEGORY_API, 
                                  NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
    */
                                  
    return subscriber_main(domainId, sample_count);
}

#elif !(defined(RTI_VXWORKS) && !defined(__RTP__)) && !defined(RTI_PSOS)
int main(int argc, char *argv[])
{
    int domainId = 0;
    int sample_count = 0; /* infinite loop */
    char *participant_auth = NULL;
    char *reader_auth = NULL;

    //// Changes for Builtin_Topics
    // Get arguments for auth strings and pass to subscriber_main()
    participant_auth=strdup("password");
    reader_auth=strdup("Reader_Auth");


    if (argc >= 2) {
        domainId = atoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = atoi(argv[2]);
    }
    if (argc >= 4) {
        participant_auth = argv[3];
    }
    if (argc >= 5) {
        reader_auth = argv[4];
    }

    /* Uncomment this to turn on additional logging
    NDDSConfigLogger::get_instance()->
        set_verbosity_by_category(NDDS_CONFIG_LOG_CATEGORY_API, 
                                  NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
    */
    
    return subscriber_main(domainId, sample_count, participant_auth, reader_auth);
}
#endif

