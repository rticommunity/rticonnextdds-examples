/* querycondition_subscriber.cxx

   A subscription example

   This file is derived from code automatically generated by the rtiddsgen 
   command:

   rtiddsgen -language C++ -example <arch> querycondition.idl

   Example subscription of type querycondition automatically generated by 
   'rtiddsgen'. To test them follow these steps:

   (1) Compile this file and the example publication.

   (2) Start the subscription with the command
       objs/<arch>/querycondition_subscriber <domain_id> <sample_count>

   (3) Start the publication with the command
       objs/<arch>/querycondition_publisher <domain_id> <sample_count>

   (4) [Optional] Specify the list of discovery initial peers and 
       multicast receive addresses via an environment variable or a file 
       (in the current working directory) called NDDS_DISCOVERY_PEERS. 
       
   You can run any number of publishers and subscribers programs, and can 
   add and remove them dynamically from the domain.
              
                                   
   Example:
        
       To run the example application on domain <domain_id>:
                          
       On Unix: 
       
       objs/<arch>/querycondition_publisher <domain_id> 
       objs/<arch>/querycondition_subscriber <domain_id> 
                            
       On Windows:
       
       objs\<arch>\querycondition_publisher <domain_id>  
       objs\<arch>\querycondition_subscriber <domain_id>   
              
       
modification history
------------ -------       
*/

#include <stdio.h>
#include <stdlib.h>
#ifdef RTI_VX653
#include <vThreadsData.h>
#endif
#include "querycondition.h"
#include "queryconditionSupport.h"
#include "ndds/ndds_cpp.h"

/* We remove all the listener code as we won't use any listener */

/* Delete all entities */
static int subscriber_shutdown(
    DDSDomainParticipant *participant)
{
    DDS_ReturnCode_t retcode;
    int status = 0;

    if (participant != NULL) {
        retcode = participant->delete_contained_entities();
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_contained_entities error %d\n", retcode);
            status = -1;
        }

        retcode = DDSTheParticipantFactory->delete_participant(participant);
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_participant error %d\n", retcode);
            status = -1;
        }
    }

    /* RTI Connext provides the finalize_instance() method on
       domain participant factory for people who want to release memory used
       by the participant factory. Uncomment the following block of code for
       clean destruction of the singleton. */
/*
    retcode = DDSDomainParticipantFactory::finalize_instance();
    if (retcode != DDS_RETCODE_OK) {
        printf("finalize_instance error %d\n", retcode);
        status = -1;
    }
*/
    return status;
}

extern "C" int subscriber_main(int domainId, int sample_count)
{
    DDSDomainParticipant *participant = NULL;
    DDSSubscriber *subscriber = NULL;
    DDSTopic *topic = NULL;
    DDSDataReader *reader = NULL;
    DDS_ReturnCode_t retcode;
    const char *type_name = NULL;
    int count = 0;
    /* Poll for new samples every 5 seconds */
    DDS_Duration_t receive_period = {5,0};
    int status = 0;

    /* To customize the participant QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    participant = DDSTheParticipantFactory->create_participant(
        domainId, DDS_PARTICIPANT_QOS_DEFAULT, 
        NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (participant == NULL) {
        printf("create_participant error\n");
        subscriber_shutdown(participant);
        return -1;
    }

    /* To customize the subscriber QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    subscriber = participant->create_subscriber(
        DDS_SUBSCRIBER_QOS_DEFAULT, NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (subscriber == NULL) {
        printf("create_subscriber error\n");
        subscriber_shutdown(participant);
        return -1;
    }

    /* Register the type before creating the topic */
    type_name = queryconditionTypeSupport::get_type_name();
    retcode = queryconditionTypeSupport::register_type(
        participant, type_name);
    if (retcode != DDS_RETCODE_OK) {
        printf("register_type error %d\n", retcode);
        subscriber_shutdown(participant);
        return -1;
    }

    /* To customize the topic QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    topic = participant->create_topic(
        "Example querycondition",
        type_name, DDS_TOPIC_QOS_DEFAULT, NULL /* listener */,
        DDS_STATUS_MASK_NONE);
    if (topic == NULL) {
        printf("create_topic error\n");
        subscriber_shutdown(participant);
        return -1;
    }

    /* Call create_datareader passing NULL in the listener parameter */
    reader = subscriber->create_datareader(
        topic, DDS_DATAREADER_QOS_DEFAULT, NULL,
        DDS_STATUS_MASK_ALL);
    if (reader == NULL) {
        printf("create_datareader error\n");
        subscriber_shutdown(participant);
        return -1;
    }

    /* If you want to change datareader_qos.history.kind programmatically rather
     * than using the XML file, you will need to add the following lines to your
     * code and comment out the create_datareader call above. */

    /*
    DDS_DataReaderQos datareader_qos;
    retcode = subscriber->get_default_datareader_qos(datareader_qos);
    if (retcode != DDS_RETCODE_OK) {
        printf("get_default_datareader_qos error\n");
        return -1;
    }

    datareader_qos.history.kind = DDS_KEEP_ALL_HISTORY_QOS;

    reader = subscriber->create_datareader(
        topic, datareader_qos, NULL,
        DDS_STATUS_MASK_ALL);
    if (reader == NULL) {
        printf("create_datareader error\n");
        subscriber_shutdown(participant);
        return -1;
    }
    */

    queryconditionDataReader *querycondition_reader = 
		queryconditionDataReader::narrow(reader);
    if (querycondition_reader == NULL) {
        printf("DataReader narrow error\n");
        return -1;
    }

    /* NOTE: There must be single-quotes in the query parameters around
     * any strings!  The single-quotes do NOT go in the query condition
     * itself. 
     */
    DDSQueryCondition *query_for_guid2;

    /* Query for 'GUID2'  This query paramater can be changed at runtime, 
     * allowing an application to selectively look at subsets of data
     * at different times. */
    DDS_StringSeq query_parameters;
    query_parameters.ensure_length(1,1);
    query_parameters[0] = DDS_String_dup("'GUID2'");

    /* Create the query condition with an expession to MATCH the id field in
     * the structure. Note that you should make a copy of the expression string
     * when creating the query condition - beware it going out of scope! */
    query_for_guid2 = querycondition_reader->create_querycondition(
                            DDS_ANY_SAMPLE_STATE, DDS_ANY_VIEW_STATE,
                            DDS_ALIVE_INSTANCE_STATE,
                            DDS_String_dup("id MATCH %0"), 
                            query_parameters);


    /* Main loop */
    for (count=0; (sample_count == 0) || (count < sample_count); ++count) {
        NDDSUtility::sleep(receive_period);

        DDS_SampleInfoSeq info_seq;
        queryconditionSeq data_seq;

        /* Check for new data calling the DataReader's take() method */
        retcode = querycondition_reader->read_w_condition(data_seq, info_seq, 
                        DDS_LENGTH_UNLIMITED, query_for_guid2);
        if (retcode == DDS_RETCODE_NO_DATA) {
            /// Not an error
            continue;
        } else if (retcode != DDS_RETCODE_OK) {
            // Is an error
            printf("take error: %d\n", retcode);
            break;
        }

        int len = 0;
        double sum = 0;

        /* Iterate through the samples read using the read_w_condition() method, 
         * accessing only the samples of GUID2.  Then, show the number of samples 
         * received and, adding the value of x on each of them to calculate the 
         * average afterwards. */
        for (int i = 0; i < data_seq.length(); ++i) {
            if (!info_seq[i].valid_data)
                continue;
            len ++;
            sum += data_seq[i].value;
			printf("Guid = %s\n", data_seq[i].id);
        }

        if (len > 0)
            printf("Got %d samples.  Avg = %.1f\n", len, sum/len);

        retcode = querycondition_reader->return_loan(data_seq, info_seq);
        if (retcode != DDS_RETCODE_OK) {
            printf("return loan error %d\n", retcode);
        }
    }

    /* Delete all entities */
    status = subscriber_shutdown(participant);

    return status;
}

#if defined(RTI_WINCE)
int wmain(int argc, wchar_t** argv)
{
    int domainId = 0;
    int sample_count = 0; /* infinite loop */ 
    
    if (argc >= 2) {
        domainId = _wtoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = _wtoi(argv[2]);
    }
    
    /* Uncomment this to turn on additional logging
    NDDSConfigLogger::get_instance()->
        set_verbosity_by_category(NDDS_CONFIG_LOG_CATEGORY_API, 
                                  NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
    */
                                  
    return subscriber_main(domainId, sample_count);
}

#elif !(defined(RTI_VXWORKS) && !defined(__RTP__)) && !defined(RTI_PSOS)
int main(int argc, char *argv[])
{
    int domainId = 0;
    int sample_count = 0; /* infinite loop */

    if (argc >= 2) {
        domainId = atoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = atoi(argv[2]);
    }


    /* Uncomment this to turn on additional logging
    NDDSConfigLogger::get_instance()->
        set_verbosity_by_category(NDDS_CONFIG_LOG_CATEGORY_API, 
                                  NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
    */
                                  
    return subscriber_main(domainId, sample_count);
}
#endif

#ifdef RTI_VX653
const unsigned char* __ctype = *(__ctypePtrGet());

extern "C" void usrAppInit ()
{
#ifdef  USER_APPL_INIT
    USER_APPL_INIT;         /* for backwards compatibility */
#endif
    
    /* add application specific code here */
    taskSpawn("sub", RTI_OSAPI_THREAD_PRIORITY_NORMAL, 0x8, 0x150000, (FUNCPTR)subscriber_main, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
   
}
#endif

