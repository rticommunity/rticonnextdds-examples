
/* keysSubscriber.java

   A publication of data of type keys

   This file is derived from code automatically generated by the rtiddsgen 
   command:

   rtiddsgen -language java -example <arch> .idl

   Example publication of type keys automatically generated by 
   'rtiddsgen' To test them follow these steps:

   (1) Compile this file and the example subscription.

   (2) Start the subscription on the same domain used for with the command
       java keysSubscriber <domain_id> <sample_count>

   (3) Start the publication with the command
       java keysPublisher <domain_id> <sample_count>

   (4) [Optional] Specify the list of discovery initial peers and 
       multicast receive addresses via an environment variable or a file 
       (in the current working directory) called NDDS_DISCOVERY_PEERS. 

   You can run any number of publishers and subscribers programs, and can 
   add and remove them dynamically from the domain.


   Example:

       To run the example application on domain <domain_id>:

       Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
       Java.                       

        On UNIX systems: 
             add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
             variable

        On Windows systems:
             add %NDDSHOME%\lib\<arch> to the 'Path' environment variable


       Run the Java applications:

        java -Djava.ext.dirs=$NDDSHOME/class keysPublisher <domain_id>

        java -Djava.ext.dirs=$NDDSHOME/class keysSubscriber <domain_id>  


modification history
------------ -------   
 */

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;

import com.rti.dds.domain.*;
import com.rti.dds.infrastructure.*;
import com.rti.dds.subscription.*;
import com.rti.dds.topic.*;
import com.rti.ndds.config.*;

// ===========================================================================

public class keysSubscriber {
    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------

    public static void main(String[] args) {
        // --- Get domain ID --- //
        int domainId = 0;
        if (args.length >= 1) {
            domainId = Integer.valueOf(args[0]).intValue();
        }

        // -- Get max loop count; 0 means infinite loop --- //
        int sampleCount = 0;
        if (args.length >= 2) {
            sampleCount = Integer.valueOf(args[1]).intValue();
        }


        /* Uncomment this to turn on additional logging
        Logger.get_instance().set_verbosity_by_category(
            LogCategory.NDDS_CONFIG_LOG_CATEGORY_API,
            LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
         */

        // --- Run --- //
        subscriberMain(domainId, sampleCount);
    }



    // -----------------------------------------------------------------------
    // Private Methods
    // -----------------------------------------------------------------------

    // --- Constructors: -----------------------------------------------------

    private keysSubscriber() {
        super();
    }


    // -----------------------------------------------------------------------

    private static void subscriberMain(int domainId, int sampleCount) {

        DomainParticipant participant = null;
        Subscriber subscriber = null;
        Topic topic = null;
        DataReaderListener listener = null;
        keysDataReader reader = null;

        try {

            // --- Create participant --- //

            /* To customize participant QoS, use
               the configuration file
               USER_QOS_PROFILES.xml */

            participant = DomainParticipantFactory.TheParticipantFactory.
                    create_participant(
                            domainId, DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
                            null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (participant == null) {
                System.err.println("create_participant error\n");
                return;
            }                         

            // --- Create subscriber --- //

            /* To customize subscriber QoS, use
               the configuration file USER_QOS_PROFILES.xml */

            subscriber = participant.create_subscriber(
                    DomainParticipant.SUBSCRIBER_QOS_DEFAULT, null /* listener */,
                    StatusKind.STATUS_MASK_NONE);
            if (subscriber == null) {
                System.err.println("create_subscriber error\n");
                return;
            }     

            // --- Create topic --- //

            /* Register type before creating topic */
            String typeName = keysTypeSupport.get_type_name(); 
            keysTypeSupport.register_type(participant, typeName);

            /* To customize topic QoS, use
               the configuration file USER_QOS_PROFILES.xml */

            topic = participant.create_topic(
                    "Example keys",
                    typeName, DomainParticipant.TOPIC_QOS_DEFAULT,
                    null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (topic == null) {
                System.err.println("create_topic error\n");
                return;
            }                     

            // --- Create reader --- //

            listener = new keysListener();

            /* To customize data reader QoS, use
               the configuration file USER_QOS_PROFILES.xml */
            reader = (keysDataReader)
                    subscriber.create_datareader(
                            topic, Subscriber.DATAREADER_QOS_DEFAULT, listener,
                            StatusKind.STATUS_MASK_ALL);

            /* If you want to set the QoS settings
             * programmatically rather than using the XML, you will need to add
             * the following lines to your code and comment out the create_datareader
             * call above.
             */

            /*
            DataReaderQos datareader_qos = new DataReaderQos();
            subscriber.get_default_datareader_qos(datareader_qos);

            datareader_qos.ownership.kind = OwnershipQosPolicyKind.EXCLUSIVE_OWNERSHIP_QOS;

            reader = (keysDataReader)
                    subscriber.create_datareader(
                            topic, datareader_qos, listener,
                            StatusKind.STATUS_MASK_ALL);
             */

            if (reader == null) {
                System.err.println("create_datareader error\n");
                return;
            }

            // --- Wait for data --- //

            final long receivePeriodSec = 1;

            for (int count = 0;
                    (sampleCount == 0) || (count < sampleCount);
                    ++count) {
                //System.out.println("keys subscriber sleeping for " + receivePeriodSec + " sec...");
                try {
                    Thread.sleep(receivePeriodSec * 1000);  // in millisec
                } catch (InterruptedException ix) {
                    System.err.println("INTERRUPTED");
                    break;
                }
            }
        } finally {

            // --- Shutdown --- //

            if(participant != null) {
                participant.delete_contained_entities();

                DomainParticipantFactory.TheParticipantFactory.
                delete_participant(participant);
            }
            /* RTI Connext provides the finalize_instance()
               method for users who want to release memory used by the
               participant factory singleton. Uncomment the following block of
               code for clean destruction of the participant factory
               singleton. */
            //DomainParticipantFactory.finalize_instance();
        }
    }

    // -----------------------------------------------------------------------
    // Private Types
    // -----------------------------------------------------------------------

    // =======================================================================

    private static class keysListener extends DataReaderAdapter {

        keysSeq _dataSeq = new keysSeq();
        SampleInfoSeq _infoSeq = new SampleInfoSeq();

        /* *** Start changes for Advanced_Keys *** */
        /* Track instance state */
        protected static final int State_Inactive = 0;
        protected static final int State_Active = 1;
        protected static final int State_No_Writers = 2;
        protected static final int State_Disposed = 3;
        protected int states[] = {State_Inactive, State_Inactive, State_Inactive};

        public void on_data_available(DataReader reader) {
            keysDataReader keysReader = (keysDataReader)reader;

            while(true) {
                keysSeq _dataSeq = new keysSeq();
                SampleInfoSeq _infoSeq = new SampleInfoSeq();
                /* Given DDS_HANDLE_NIL as a parameter, take_next_instance returns
                a sequence containing samples from only the next (in a well-determined
                but unspecified order) un-taken instance.
                 */
                try {
                    keysReader.take_next_instance(
                            _dataSeq, _infoSeq, 
                            ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                            InstanceHandle_t.HANDLE_NIL,
                            SampleStateKind.ANY_SAMPLE_STATE,
                            ViewStateKind.ANY_VIEW_STATE,
                            InstanceStateKind.ANY_INSTANCE_STATE);

                    /* We process all the obtained samples for a particular instance */
                    for (int i = 0; i < _infoSeq.size(); ++i) {
                        SampleInfo info = (SampleInfo)_infoSeq.get(i);
                        /* We first check if the sample includes valid data */
                        if (info.valid_data) {
                            keys data = (keys)_dataSeq.get(i);

                            if (info.view_state == ViewStateKind.NEW_VIEW_STATE) {
                                new_instance_found(keysReader, info, data);
                            }

                            /* We check if the obtained samples are associated to one
                            of the instances of interest.
                            Since take_next_instance gives sequences of the same instance,
                            we only need to test this for the first sample obtained.
                             */
                            if (i == 0 && !key_is_relevant(data)) {
                                break;
                            }

                            handle_data(keysReader, info, data);
                        } else {
                            /* Since there is not valid data, it may include metadata */
                            keys dummy = new keys();
                            keysReader.get_key_value(dummy, info.instance_handle);

                            /* Here we print a message and change the instance state
                            if the instance state is ALIVE_NO_WRITERS or ALIVE_DISPOSED */
                            if (info.instance_state == InstanceStateKind.NOT_ALIVE_NO_WRITERS_INSTANCE_STATE) {
                                instance_lost_writers(keysReader, info, dummy);
                            } else if (info.instance_state == InstanceStateKind.NOT_ALIVE_DISPOSED_INSTANCE_STATE) {
                                instance_disposed(keysReader, info, dummy);
                            }
                        }
                    }
                } catch (RETCODE_NO_DATA noData) {
                    // No data to process
                    break;
                } finally {
                    /* Prepare sequences for next take_next_instance */
                    keysReader.return_loan(_dataSeq, _infoSeq);            
                }
            }
        }

        /* These are not called by DDS.   on_data_available() calls
        the appropriate function when it gets updates about
        an instances' status
         */
        public void new_instance_found(keysDataReader keys_reader,
                SampleInfo info, 
                keys msg) {
            /* There are three cases here:
            1.) truly new instance
            2.) instance lost all writers, but now we're getting data again
            3.) instance was disposed, but a new one has been created

            We distinguish these cases by examining generation counts, BUT
            note that if the instance resources have been reclaimed, the
            generation counts may be reset to 0.

            Instances are eligible for resource cleanup if there are no
            active writers and all samples have been taken.  To reliably
            determine which case a 'new' instance falls into, the application
            must store state information on a per-instance basis.

            Note that this example assumes that state changes only occur via
            explicit register_instance(), unregister_instance() and dispose()
            calls from the datawriter.  In reality, these changes could also
            occur due to lost liveliness or missed deadlines, so those
            listeners would also need to update the instance state.
             */

            switch (states[msg.code]) {
            case State_Inactive:
                System.out.print("New instance found; code = " + msg.code + "\n");
                break;
            case State_Active:
                /* An active instance should never be interpreted as new */
                System.out.print("Error, 'new' already-active instance found; code = " + msg.code + "\n");
                break;
            case State_No_Writers:
                System.out.print("Found writer for instance; code = " + msg.code + "\n");
                break;
            case State_Disposed:
                System.out.print("Found reborn instance; code = " + msg.code + "\n");
                break;
            }
            states[msg.code] = State_Active;
        }
        public void instance_lost_writers(keysDataReader keys_reader,
                SampleInfo info, 
                keys msg) {
            System.out.print("Instance has no writers; code = " + msg.code + "\n");
            states[msg.code] = State_No_Writers;
        }

        public void instance_disposed(keysDataReader keys_reader,
                SampleInfo info, 
                keys msg) {
            System.out.print("Instance disposed; code = " + msg.code + "\n");        
            states[msg.code] = State_Disposed;
        }

        /* Called to handle relevant data samples */
        public void handle_data(keysDataReader keys_reader,
                SampleInfo info, 
                keys msg) {
            System.out.print("code: " + msg.code + ", x: " + msg.x +
                    ", y: " + msg.y + "\n");
        }

        /* Called to determine if a key is relevant to this application */
        boolean key_is_relevant(keys msg) {
            /* For this example we just care about codes > 0,
            which are the ones related to instances ins1 and ins2 .*/
            return (msg.code > 0);
        }

        /* *** End changes for Advanced_Keys *** */
    }
}


