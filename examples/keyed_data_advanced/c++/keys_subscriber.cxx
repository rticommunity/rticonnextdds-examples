/* keys_subscriber.cxx

A subscription example

This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language C++ -example <arch> keys.idl

Example subscription of type keys automatically generated by 
'rtiddsgen'. To test them follow these steps:

(1) Compile this file and the example publication.

(2) Start the subscription with the command
objs/<arch>/keys_subscriber <domain_id> <sample_count>

(3) Start the publication with the command
objs/<arch>/keys_publisher <domain_id> <sample_count>

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS. 

You can run any number of publishers and subscribers programs, and can 
add and remove them dynamically from the domain.


Example:

To run the example application on domain <domain_id>:

On Unix: 

objs/<arch>/keys_publisher <domain_id> 
objs/<arch>/keys_subscriber <domain_id> 

On Windows:

objs\<arch>\keys_publisher <domain_id>  
objs\<arch>\keys_subscriber <domain_id>   


modification history
------------ -------       
*/

#include <stdio.h>
#include <stdlib.h>
#ifdef RTI_VX653
#include <vThreadsData.h>
#endif
#include "keys.h"
#include "keysSupport.h"
#include "ndds/ndds_cpp.h"

class keysListener : public DDSDataReaderListener {
public:
    virtual void on_requested_deadline_missed(
        DDSDataReader* /*reader*/,
        const DDS_RequestedDeadlineMissedStatus& /*status*/) {}

    virtual void on_requested_incompatible_qos(
        DDSDataReader* /*reader*/,
        const DDS_RequestedIncompatibleQosStatus& /*status*/) {}

    virtual void on_sample_rejected(
        DDSDataReader* /*reader*/,
        const DDS_SampleRejectedStatus& /*status*/) {}

    virtual void on_liveliness_changed(
        DDSDataReader* /*reader*/,
        const DDS_LivelinessChangedStatus& /*status*/) {}

    virtual void on_sample_lost(
        DDSDataReader* /*reader*/,
        const DDS_SampleLostStatus& /*status*/) {}

    virtual void on_subscription_matched(
        DDSDataReader* /*reader*/,
        const DDS_SubscriptionMatchedStatus& /*status*/) {}

    virtual void on_data_available(DDSDataReader* reader);

    /**** Start changes for Advanced_Keys ****/
    /* These are not called by DDS.   on_data_available() calls
    the appropriate function when it gets updates about
    an instances' status
    */
    virtual void new_instance_found(keysDataReader* keys_reader,
        const DDS_SampleInfo* info, 
        const keys* msg);

    virtual void instance_lost_writers(keysDataReader* keys_reader,
        const DDS_SampleInfo* info, 
        const keys* msg);

    virtual void instance_disposed(keysDataReader* keys_reader,
        const DDS_SampleInfo* info, 
        const keys* msg);

    /* Called to handle relevant data samples */
    virtual void handle_data(keysDataReader* keys_reader,
        const DDS_SampleInfo* info,
        const keys* msg);

    /* Called to determine if a key is relevant to this application */
    virtual bool key_is_relevant(const keys* msg);

    /* Initialize instance states */
    keysListener() {
        for(int i = 0; i < 3; ++i)
            states[i] = inactive;
    }
protected:
    /* Track instance state */
    enum Instance_State {inactive, active, no_writers, disposed};
    Instance_State states[3];
    /**** End changes for Advanced_Keys ****/
};

/**** Start changes for Advanced_Keys ****/
void keysListener::on_data_available(DDSDataReader* reader)
{
    keysDataReader *keys_reader = NULL;
    keysSeq data_seq;
    DDS_SampleInfoSeq info_seq;
    DDS_ReturnCode_t retcode;
    int i;

    keys_reader = keysDataReader::narrow(reader);
    if (keys_reader == NULL) {
        printf("DataReader narrow error\n");
        return;
    }

    while(true) {
        /* Given DDS_HANDLE_NIL as a parameter, take_next_instance returns
        a sequence containing samples from only the next (in a well-determined
        but unspecified order) un-taken instance.
        */
        retcode = keys_reader->take_next_instance(
            data_seq, info_seq, DDS_LENGTH_UNLIMITED, DDS_HANDLE_NIL,
            DDS_ANY_SAMPLE_STATE, DDS_ANY_VIEW_STATE, DDS_ANY_INSTANCE_STATE);

        if (retcode == DDS_RETCODE_NO_DATA) {
            break;
        } else if (retcode != DDS_RETCODE_OK) {
            printf("read error %d\n", retcode);
            break;
        }

        /* We process all the obtained samples for a particular instance */
        for (i = 0; i < data_seq.length(); ++i) {
            /* We first check if the sample includes valid data */
            if (info_seq[i].valid_data) {
                if (info_seq[i].view_state == DDS_NEW_VIEW_STATE) {
                    new_instance_found(keys_reader, &info_seq[i], &data_seq[i]);
                }

                /* We check if the obtained samples are associated to one
                of the instances of interest.
                Since take_next_instance gives sequences of the same instance,
                we only need to test this for the first sample obtained.
                */
                if (i == 0 && !key_is_relevant(&data_seq[i])) {
                    break;
                }

                handle_data(keys_reader, &info_seq[i], &data_seq[i]);

            } else {
                /* Since there is not valid data, it may include metadata */
                keys dummy;
                retcode = keys_reader->get_key_value(dummy, info_seq[i].instance_handle);
                if (retcode != DDS_RETCODE_OK) {
                    printf("get_key_value error %d\n", retcode);
                    continue;
                }

                /* Here we print a message and change the instance state
                   if the instance state is ALIVE_NO_WRITERS or ALIVE_DISPOSED */
                if (info_seq[i].instance_state == DDS_NOT_ALIVE_NO_WRITERS_INSTANCE_STATE) {
                    instance_lost_writers(keys_reader, &info_seq[i], &dummy);
                } else if (info_seq[i].instance_state == DDS_NOT_ALIVE_DISPOSED_INSTANCE_STATE) {
                    instance_disposed(keys_reader, &info_seq[i], &dummy);
                }
            }
        }

        /* Prepare sequences for next take_next_instance */
        retcode = keys_reader->return_loan(data_seq, info_seq);
        if (retcode != DDS_RETCODE_OK) {
            printf("return loan error %d\n", retcode);
        }
        data_seq.maximum(0);
        info_seq.maximum(0);
    }
}

void keysListener::new_instance_found(keysDataReader* keys_reader,
    const DDS_SampleInfo* info, 
    const keys* msg)
{
    /* There are three cases here:
    1.) truly new instance
    2.) instance lost all writers, but now we're getting data again
    3.) instance was disposed, but a new one has been created

    We distinguish these cases by examining generation counts, BUT
    note that if the instance resources have been reclaimed, the
    generation counts may be reset to 0.

    Instances are eligible for resource cleanup if there are no
    active writers and all samples have been taken.  To reliably
    determine which case a 'new' instance falls into, the application
    must store state information on a per-instance basis.

    Note that this example assumes that state changes only occur via
    explicit register_instance(), unregister_instance() and dispose()
    calls from the datawriter.  In reality, these changes could also
    occur due to lost liveliness or missed deadlines, so those
    listeners would also need to update the instance state.
    */

    switch (states[msg->code]) {
        case inactive:
            printf("New instance found; code = %d\n", msg->code);
            break;
        case active:
            /* An active instance should never be interpreted as new */
            printf("Error, 'new' already-active instance found; code = %d\n", msg->code);
            break;
        case no_writers:
            printf("Found writer for instance; code = %d\n", msg->code);
            break;
        case disposed:
            printf("Found reborn instance; code = %d\n", msg->code);
            break;
    }
    states[msg->code] = active;
}

void keysListener::instance_lost_writers(keysDataReader* keys_reader,
    const DDS_SampleInfo* info,
    const keys* msg)
{
    printf("Instance has no writers; code = %d\n", msg->code);
    states[msg->code] = no_writers;
}

void keysListener::instance_disposed(keysDataReader* keys_reader,
    const DDS_SampleInfo* info, 
    const keys* msg)
{
    printf("Instance disposed; code = %d\n", msg->code);        
    states[msg->code] = disposed;
}

/* Called to handle relevant data samples */
void keysListener::handle_data(keysDataReader* keys_reader,
    const DDS_SampleInfo* info,
    const keys* msg) {
        printf("code: %d, x: %d, y: %d\n", msg->code,
            msg->x, msg->y);
}

bool keysListener::key_is_relevant(const keys* msg)
{
    /* For this example we just care about codes > 0,
    which are the ones related to instances ins1 and ins2 .*/
    return (msg->code > 0);
}
/**** End changes for Advanced_Keys ****/

/* Delete all entities */
static int subscriber_shutdown(
    DDSDomainParticipant *participant)
{
    DDS_ReturnCode_t retcode;
    int status = 0;

    if (participant != NULL) {
        retcode = participant->delete_contained_entities();
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_contained_entities error %d\n", retcode);
            status = -1;
        }

        retcode = DDSTheParticipantFactory->delete_participant(participant);
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_participant error %d\n", retcode);
            status = -1;
        }
    }

    /* RTI Connext provides the finalize_instance() method on
    domain participant factory for people who want to release memory used
    by the participant factory. Uncomment the following block of code for
    clean destruction of the singleton. */
    /*
    retcode = DDSDomainParticipantFactory::finalize_instance();
    if (retcode != DDS_RETCODE_OK) {
    printf("finalize_instance error %d\n", retcode);
    status = -1;
    }
    */
    return status;
}

extern "C" int subscriber_main(int domainId, int sample_count)
{
    DDSDomainParticipant *participant = NULL;
    DDSSubscriber *subscriber = NULL;
    DDSTopic *topic = NULL;
    keysListener *reader_listener = NULL; 
    DDSDataReader *reader = NULL;
    DDS_ReturnCode_t retcode;
    const char *type_name = NULL;
    int count = 0;
    DDS_Duration_t receive_period = {1,0};
    int status = 0;

    /* To customize the participant QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    participant = DDSTheParticipantFactory->create_participant(
        domainId, DDS_PARTICIPANT_QOS_DEFAULT, 
        NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (participant == NULL) {
        printf("create_participant error\n");
        subscriber_shutdown(participant);
        return -1;
    }

    /* To customize the subscriber QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    subscriber = participant->create_subscriber(
        DDS_SUBSCRIBER_QOS_DEFAULT, NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (subscriber == NULL) {
        printf("create_subscriber error\n");
        subscriber_shutdown(participant);
        return -1;
    }

    /* Register the type before creating the topic */
    type_name = keysTypeSupport::get_type_name();
    retcode = keysTypeSupport::register_type(
        participant, type_name);
    if (retcode != DDS_RETCODE_OK) {
        printf("register_type error %d\n", retcode);
        subscriber_shutdown(participant);
        return -1;
    }

    /* To customize the topic QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    topic = participant->create_topic(
        "Example keys",
        type_name, DDS_TOPIC_QOS_DEFAULT, NULL /* listener */,
        DDS_STATUS_MASK_NONE);
    if (topic == NULL) {
        printf("create_topic error\n");
        subscriber_shutdown(participant);
        return -1;
    }

    /* Create a data reader listener */
    reader_listener = new keysListener();

    /* To customize the data reader QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    reader = subscriber->create_datareader(
        topic, DDS_DATAREADER_QOS_DEFAULT, reader_listener,
        DDS_STATUS_MASK_ALL);
    
    /* If you want to set the writer_data_lifecycle QoS settings
     * programmatically rather than using the XML, you will need to add
     * the following lines to your code and comment out the create_datareader
     * call above.
     */
    /*
    DDS_DataReaderQos datareader_qos;
    retcode = subscriber->get_default_datareader_qos(datareader_qos);
    if (retcode != DDS_RETCODE_OK) {
        printf("get_default_datareader_qos error\n");
        return -1;
    }

    datareader_qos.ownership.kind = DDS_EXCLUSIVE_OWNERSHIP_QOS;

    reader = subscriber->create_datareader(
        topic, datareader_qos, reader_listener,
        DDS_STATUS_MASK_ALL);
    */

    if (reader == NULL) {
        printf("create_datareader error\n");
        subscriber_shutdown(participant);
        delete reader_listener;
        return -1;
    }

    /* Main loop */
    for (count=0; (sample_count == 0) || (count < sample_count); ++count) {

            //printf("keys subscriber sleeping for %d sec...\n", receive_period.sec);

        NDDSUtility::sleep(receive_period);
    }

    /* Delete all entities */
    status = subscriber_shutdown(participant);
    delete reader_listener;

    return status;
}

#if defined(RTI_WINCE)
int wmain(int argc, wchar_t** argv)
{
    int domainId = 0;
    int sample_count = 0; /* infinite loop */ 

    if (argc >= 2) {
        domainId = _wtoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = _wtoi(argv[2]);
    }

    /* Uncomment this to turn on additional logging
    NDDSConfigLogger::get_instance()->
    set_verbosity_by_category(NDDS_CONFIG_LOG_CATEGORY_API, 
    NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
    */

    return subscriber_main(domainId, sample_count);
}

#elif !(defined(RTI_VXWORKS) && !defined(__RTP__)) && !defined(RTI_PSOS)
int main(int argc, char *argv[])
{
    int domainId = 0;
    int sample_count = 0; /* infinite loop */

    if (argc >= 2) {
        domainId = atoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = atoi(argv[2]);
    }


    /* Uncomment this to turn on additional logging
    NDDSConfigLogger::get_instance()->
    set_verbosity_by_category(NDDS_CONFIG_LOG_CATEGORY_API, 
    NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
    */

    return subscriber_main(domainId, sample_count);
}
#endif

#ifdef RTI_VX653
const unsigned char* __ctype = *(__ctypePtrGet());

extern "C" void usrAppInit ()
{
#ifdef  USER_APPL_INIT
    USER_APPL_INIT;         /* for backwards compatibility */
#endif

    /* add application specific code here */
    taskSpawn("sub", RTI_OSAPI_THREAD_PRIORITY_NORMAL, 0x8, 0x150000, (FUNCPTR)subscriber_main, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

}
#endif

