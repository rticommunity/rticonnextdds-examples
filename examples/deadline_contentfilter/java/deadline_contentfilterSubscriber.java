
/* deadline_contentfilterSubscriber.java

   A publication of data of type deadline_contentfilter

   This file is derived from code automatically generated by the rtiddsgen 
   command:

   rtiddsgen -language java -example <arch> .idl

   Example publication of type deadline_contentfilter automatically generated by 
   'rtiddsgen' To test them follow these steps:

   (1) Compile this file and the example subscription.

   (2) Start the subscription on the same domain used for with the command
       java deadline_contentfilterSubscriber <domain_id> <sample_count>

   (3) Start the publication with the command
       java deadline_contentfilterPublisher <domain_id> <sample_count>

   (4) [Optional] Specify the list of discovery initial peers and 
       multicast receive addresses via an environment variable or a file 
       (in the current working directory) called NDDS_DISCOVERY_PEERS. 
       
   You can run any number of publishers and subscribers programs, and can 
   add and remove them dynamically from the domain.
              
                                   
   Example:
        
       To run the example application on domain <domain_id>:
            
       Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
       Java.                       
       
        On UNIX systems: 
             add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
             variable
                                         
        On Windows systems:
             add %NDDSHOME%\lib\<arch> to the 'Path' environment variable
                        

       Run the Java applications:
       
        java -Djava.ext.dirs=$NDDSHOME/class deadline_contentfilterPublisher <domain_id>

        java -Djava.ext.dirs=$NDDSHOME/class deadline_contentfilterSubscriber <domain_id>  
       
       
modification history
------------ -------   
*/

import java.text.DecimalFormat;

import com.rti.dds.domain.DomainParticipant;
import com.rti.dds.domain.DomainParticipantFactory;
import com.rti.dds.infrastructure.RETCODE_NO_DATA;
import com.rti.dds.infrastructure.ResourceLimitsQosPolicy;
import com.rti.dds.infrastructure.StatusKind;
import com.rti.dds.infrastructure.StringSeq;
import com.rti.dds.subscription.DataReader;
import com.rti.dds.subscription.DataReaderAdapter;
import com.rti.dds.subscription.DataReaderListener;
import com.rti.dds.subscription.DataReaderQos;
import com.rti.dds.subscription.InstanceStateKind;
import com.rti.dds.subscription.RequestedDeadlineMissedStatus;
import com.rti.dds.subscription.SampleInfo;
import com.rti.dds.subscription.SampleInfoSeq;
import com.rti.dds.subscription.SampleStateKind;
import com.rti.dds.subscription.Subscriber;
import com.rti.dds.subscription.ViewStateKind;
import com.rti.dds.topic.ContentFilteredTopic;
import com.rti.dds.topic.Topic;

// ===========================================================================

public class deadline_contentfilterSubscriber {
    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------
    
    public static void main(String[] args) {
        // --- Get domain ID --- //
        int domainId = 0;
        if (args.length >= 1) {
            domainId = Integer.valueOf(args[0]).intValue();
        }
        
        // -- Get max loop count; 0 means infinite loop --- //
        int sampleCount = 0;
        if (args.length >= 2) {
            sampleCount = Integer.valueOf(args[1]).intValue();
        }
        
        
        /* Uncomment this to turn on additional logging
        Logger.get_instance().set_verbosity_by_category(
            LogCategory.NDDS_CONFIG_LOG_CATEGORY_API,
            LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
        */
        
        // --- Run --- //
        subscriberMain(domainId, sampleCount);
    }
    
    
    
    // -----------------------------------------------------------------------
    // Private Methods
    // -----------------------------------------------------------------------
    
    // --- Constructors: -----------------------------------------------------
    
    private deadline_contentfilterSubscriber() {
        super();
    }
    
    
    // -----------------------------------------------------------------------
    
    private static void subscriberMain(int domainId, int sampleCount) {

        DomainParticipant participant = null;
        Subscriber subscriber = null;
        Topic topic = null;
        DataReaderListener listener = null;
        deadline_contentfilterDataReader reader = null;

        try {

            // --- Create participant --- //
    
            /* To customize participant QoS, use
               the configuration file
               USER_QOS_PROFILES.xml */
    
            participant = DomainParticipantFactory.TheParticipantFactory.
                create_participant(
                    domainId, DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
                    null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (participant == null) {
                System.err.println("create_participant error\n");
                return;
            }                         

            // --- Create subscriber --- //
    
            /* To customize subscriber QoS, use
               the configuration file USER_QOS_PROFILES.xml */
    
            subscriber = participant.create_subscriber(
                DomainParticipant.SUBSCRIBER_QOS_DEFAULT, null /* listener */,
                StatusKind.STATUS_MASK_NONE);
            if (subscriber == null) {
                System.err.println("create_subscriber error\n");
                return;
            }     
                
            // --- Create topic --- //
        
            /* Register type before creating topic */
            String typeName = deadline_contentfilterTypeSupport.get_type_name(); 
            deadline_contentfilterTypeSupport.register_type(participant, typeName);
    
            /* To customize topic QoS, use
               the configuration file USER_QOS_PROFILES.xml */
    
            topic = participant.create_topic(
                "Example deadline_contentfilter",
                typeName, DomainParticipant.TOPIC_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (topic == null) {
                System.err.println("create_topic error\n");
                return;
            }                     
        
            //// Start changes for Deadline
            // Create content filtered topic

            StringSeq parameters = new StringSeq(1);
            parameters.add("2");

            ContentFilteredTopic cft = participant.create_contentfilteredtopic(
                "ContentFilteredTopic", topic, "code < %0", parameters);

            // --- Create reader --- //

            listener = new deadline_contentfilterListener();
            reader = (deadline_contentfilterDataReader)
            subscriber.create_datareader(
                cft, Subscriber.DATAREADER_QOS_DEFAULT, listener,
                StatusKind.STATUS_MASK_ALL);

            /*
            DataReaderQos datareader_qos = new DataReaderQos();
            subscriber.get_default_datareader_qos(datareader_qos);

            // Set deadline QoS
            datareader_qos.deadline.period.sec = 2;
            datareader_qos.deadline.period.nanosec = 0;
            */

        
            // --- Wait for data --- //

            final long receivePeriodSec = 1;

            for (int count = 0; (sampleCount == 0) || (count < sampleCount); ++count) {
                if (count == 5) {
                    System.out.print("Starting to filter out instance1\n");
                    parameters.set(0, "1");
                    cft.set_expression_parameters(parameters);
                }

                try {
                    Thread.sleep(receivePeriodSec * 1000);  // in millisec
                } catch (InterruptedException ix) {
                    System.err.println("INTERRUPTED");
                    break;
                }
            }

            //// End changes for Deadline

        } finally {

            // --- Shutdown --- //

            if(participant != null) {
                participant.delete_contained_entities();

                DomainParticipantFactory.TheParticipantFactory.
                    delete_participant(participant);
            }
            /* RTI Connext provides the finalize_instance()
               method for users who want to release memory used by the
               participant factory singleton. Uncomment the following block of
               code for clean destruction of the participant factory
               singleton. */
            //DomainParticipantFactory.finalize_instance();
        }
    }
    
    // -----------------------------------------------------------------------
    // Private Types
    // -----------------------------------------------------------------------
    
    // =======================================================================
    
    private static class deadline_contentfilterListener extends DataReaderAdapter {
            
        deadline_contentfilterSeq _dataSeq = new deadline_contentfilterSeq();
        SampleInfoSeq _infoSeq = new SampleInfoSeq();

        //// Start changes for Deadline
        long _initms = System.currentTimeMillis();
        DecimalFormat decFormat = new DecimalFormat("#.##");
        
        @Override
        public void on_data_available(DataReader reader) {
            deadline_contentfilterDataReader deadlineReader =
                (deadline_contentfilterDataReader)reader;
            
            try {
                deadlineReader.take(
                    _dataSeq, _infoSeq,
                    ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                    SampleStateKind.ANY_SAMPLE_STATE,
                    ViewStateKind.ANY_VIEW_STATE,
                    InstanceStateKind.ANY_INSTANCE_STATE);

                for(int i = 0; i < _dataSeq.size(); ++i) {
                    SampleInfo info = (SampleInfo)_infoSeq.get(i);

                    if (!info.valid_data) {
                        continue;
                    }
                    deadline_contentfilter data = (deadline_contentfilter)_dataSeq.get(i);
                    double elapsed = (System.currentTimeMillis()-_initms)/1000.0;
                    System.out.print("@ t=" + decFormat.format(elapsed) + 
                                     "s, Instance" + data.code + ": <" + data.x
                                     + "," + data.y + ">\n");                            
                }
            } catch (RETCODE_NO_DATA noData) {
                // No data to process
            } finally {
                deadlineReader.return_loan(_dataSeq, _infoSeq);
            }
        }
        
        @Override
        public void on_requested_deadline_missed(
                DataReader reader, RequestedDeadlineMissedStatus status) {
                deadline_contentfilterDataReader deadlineReader = (deadline_contentfilterDataReader)reader;
                
                deadline_contentfilter dummy = new deadline_contentfilter();
                deadlineReader.get_key_value(dummy, status.last_instance_handle);

                double elapsed = (System.currentTimeMillis()-_initms)/1000.0;
                System.out.print("Missed deadline @ t=" + decFormat.format(elapsed)
                                 + "s on instance code = " + dummy.code + "\n");
            }
            //// End changes for Deadline        
    }
}


        