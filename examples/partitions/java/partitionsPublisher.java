
/* partitionsPublisher.java

   A publication of data of type partitions

   This file is derived from code automatically generated by the rtiddsgen 
   command:

   rtiddsgen -language java -example <arch> .idl

   Example publication of type partitions automatically generated by 
   'rtiddsgen' To test them follow these steps:

   (1) Compile this file and the example subscription.

   (2) Start the subscription with the command
       java partitionsSubscriber <domain_id> <sample_count>
       
   (3) Start the publication with the command
       java partitionsPublisher <domain_id> <sample_count>

   (4) [Optional] Specify the list of discovery initial peers and 
       multicast receive addresses via an environment variable or a file 
       (in the current working directory) called NDDS_DISCOVERY_PEERS.  
       
   You can run any number of publishers and subscribers programs, and can 
   add and remove them dynamically from the domain.
              
   Example:
        
       To run the example application on domain <domain_id>:
            
       Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
       Java.                       
       
        On Unix: 
             add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
             variable
                                         
        On Windows:
             add %NDDSHOME%\lib\<arch> to the 'Path' environment variable
                        

       Run the Java applications:
       
        java -Djava.ext.dirs=$NDDSHOME/class partitionsPublisher <domain_id>

        java -Djava.ext.dirs=$NDDSHOME/class partitionsSubscriber <domain_id>        

       
       
modification history
------------ -------         
*/

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;

import com.rti.dds.domain.*;
import com.rti.dds.infrastructure.*;
import com.rti.dds.publication.*;
import com.rti.dds.topic.*;
import com.rti.ndds.config.*;

// ===========================================================================

public class partitionsPublisher {
    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------
    
    public static void main(String[] args) {
        // --- Get domain ID --- //
        int domainId = 0;
        if (args.length >= 1) {
            domainId = Integer.valueOf(args[0]).intValue();
        }

        // -- Get max loop count; 0 means infinite loop --- //
        int sampleCount = 0;
        if (args.length >= 2) {
            sampleCount = Integer.valueOf(args[1]).intValue();
        }
        
        /* Uncomment this to turn on additional logging
        Logger.get_instance().set_verbosity_by_category(
            LogCategory.NDDS_CONFIG_LOG_CATEGORY_API,
            LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
        */
        
        // --- Run --- //
        publisherMain(domainId, sampleCount);
    }
    
    
    
    // -----------------------------------------------------------------------
    // Private Methods
    // -----------------------------------------------------------------------
    
    // --- Constructors: -----------------------------------------------------
    
    private partitionsPublisher() {
        super();
    }
    
    
    // -----------------------------------------------------------------------
    
    private static void publisherMain(int domainId, int sampleCount) {

        DomainParticipant participant = null;
        Publisher publisher = null;
        Topic topic = null;
        partitionsDataWriter writer = null;

        try {
            // --- Create participant --- //
    
            /* To customize participant QoS, use
               the configuration file
               USER_QOS_PROFILES.xml */
    
            participant = DomainParticipantFactory.TheParticipantFactory.
                create_participant(
                    domainId, DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
                    null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (participant == null) {
                System.err.println("create_participant error\n");
                return;
            }        
                    
            // --- Create publisher --- //
	    
	    PublisherQos publisher_qos = new PublisherQos();
            participant.get_default_publisher_qos(publisher_qos);

	    /* If you want to change the Partition name programmatically rather than
	     * using the XML, you will need to add the following lines to your code
	     * and comment out the create_publisher() call bellow.
	     */
	    /*
	    publisher_qos.partition.name.clear();
            publisher_qos.partition.name.add("ABC");
            publisher_qos.partition.name.add("foo");
	    
	    publisher = participant.create_publisher(publisher_qos, 
						     null,
						     StatusKind.STATUS_MASK_NONE);
	    */

            publisher = participant.create_publisher(DomainParticipant.PUBLISHER_QOS_DEFAULT, 
						     null,
						     StatusKind.STATUS_MASK_NONE);
            if (publisher == null) {
                System.err.println("create_publisher error\n");
                return;
            }

	    System.out.print("Setting partition to '" +
                             publisher_qos.partition.name.get(0) + "', '" +
                             publisher_qos.partition.name.get(1) + "'...\n");
	    
        
            // --- Create topic --- //

            /* Register type before creating topic */
            String typeName = partitionsTypeSupport.get_type_name();
            partitionsTypeSupport.register_type(participant, typeName);
    
            /* To customize topic QoS, use
               the configuration file USER_QOS_PROFILES.xml */
    
            topic = participant.create_topic(
                "Example partitions",
                typeName, DomainParticipant.TOPIC_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (topic == null) {
                System.err.println("create_topic error\n");
                return;
            }           
                
            // --- Create writer --- //
	    /* In this example we set a Reliable datawriter, with Transient Local 
	     * durability. By default we set up these QoS settings via XML. If you
	     * want to to it programmatically, use the following code, and comment out
	     * the create_datawriter call bellow.
	     */
	    /*
            DataWriterQos datawriter_qos = new DataWriterQos();
            publisher.get_default_datawriter_qos(datawriter_qos);

            datawriter_qos.reliability.kind =
                ReliabilityQosPolicyKind.RELIABLE_RELIABILITY_QOS;
            datawriter_qos.durability.kind = 
                DurabilityQosPolicyKind.TRANSIENT_LOCAL_DURABILITY_QOS;
            datawriter_qos.history.kind = 
                HistoryQosPolicyKind.KEEP_LAST_HISTORY_QOS;
            datawriter_qos.history.depth = 3;

            writer = (partitionsDataWriter)
                publisher.create_datawriter(
                    topic, datawriter_qos,
                    null, StatusKind.STATUS_MASK_NONE);
	    */
            writer = (partitionsDataWriter)
                publisher.create_datawriter(
                    topic, Publisher.DATAWRITER_QOS_DEFAULT,
                    null, StatusKind.STATUS_MASK_NONE);
            if (writer == null) {
                System.err.println("create_datawriter error\n");
                return;
            }
                                        
            // --- Write --- //

            /* Create data sample for writing */
            partitions instance = new partitions();

            InstanceHandle_t instance_handle = InstanceHandle_t.HANDLE_NIL;
            /* For a data type that has a key, if the same instance is going to be
               written multiple times, initialize the key here
               and register the keyed instance prior to writing */
            //instance_handle = writer.register_instance(instance);

            final long sendPeriodMillis = 1000; // 1 second

            for (int count = 0;
                 (sampleCount == 0) || (count < sampleCount);
                 ++count) {
                System.out.println("Writing partitions, count " + count);
		instance.x = count;
                writer.write(instance, instance_handle);
                try {
                    Thread.sleep(sendPeriodMillis);
                } catch (InterruptedException ix) {
                    System.err.println("INTERRUPTED");
                    break;
                }

		/* Every 5 samples we will change the Partition name. These are the
		 * partition expressions we are going to try: 
		 * "bar", "A*", "A?C", "X*Z", "zzz", "A*C"
		 */
		if ((count+1) % 25 == 0) {
                    // Matches "ABC" -- name[1] here can match name[0] there, 
                    // as long as there is some overlapping name
                    publisher_qos.partition.name.set(0, "zzz");
                    publisher_qos.partition.name.set(1, "A*C");
                    System.out.print("Setting partition to '" + 
                                     publisher_qos.partition.name.get(0) + "', '" + 
                                     publisher_qos.partition.name.get(1) + "'...\n");
                    publisher.set_qos(publisher_qos);
		}
		else if ((count+1) % 20 == 0) {
                    // Strings that are regular expressions aren't tested for
                    // literal matches, so this won't match "X*Z"
                    publisher_qos.partition.name.set(0, "X*Z");
                    System.out.print("Setting partition to '" + 
                                     publisher_qos.partition.name.get(0) + "', '" + 
                                     publisher_qos.partition.name.get(1) + "'...\n");
                    publisher.set_qos(publisher_qos);		    
		}
		else if ((count+1) % 15 == 0) {
                    // Matches "ABC"
                    publisher_qos.partition.name.set(0, "A?C");
                    System.out.print("Setting partition to '" + 
                                     publisher_qos.partition.name.get(0) + "', '" + 
                                     publisher_qos.partition.name.get(1) + "'...\n");
                    publisher.set_qos(publisher_qos);
		}
		else if ((count+1) % 10 == 0) {
                    // Matches "ABC"
                    publisher_qos.partition.name.set(0, "A*");
                    System.out.print("Setting partition to '" + 
                                     publisher_qos.partition.name.get(0) + "', '" + 
                                     publisher_qos.partition.name.get(1) + "'...\n");
                    publisher.set_qos(publisher_qos);
		}
		else if ((count+1) % 5 == 0) {
                    // No literal match for "bar"
                    publisher_qos.partition.name.set(0, "bar");
                    System.out.print("Setting partition to '" +
                                     publisher_qos.partition.name.get(0) + "', '" + 
                                     publisher_qos.partition.name.get(1) + "'...\n");
                    publisher.set_qos(publisher_qos);
		}
            }

            //writer.unregister_instance(instance, instance_handle);

        } finally {

            // --- Shutdown --- //

            if(participant != null) {
                participant.delete_contained_entities();

                DomainParticipantFactory.TheParticipantFactory.
                    delete_participant(participant);
            }
            /* RTI Connext provides finalize_instance()
               method for people who want to release memory used by the
               participant factory singleton. Uncomment the following block of
               code for clean destruction of the participant factory
               singleton. */
            //DomainParticipantFactory.finalize_instance();
        }
    }
}

        