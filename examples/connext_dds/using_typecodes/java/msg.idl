/*
 * (c) 2013-2019 Copyright, Real-Time Innovations, Inc.  All rights reserved.
 *
 * RTI grants Licensee a license to use, modify, compile, and create derivative
 * works of the Software.  Licensee has the right to distribute object form
 * only for use with RTI products.  The Software is provided "as is", with no
 * warranty of any type, including any warranty for fitness for any purpose.
 * RTI is under no obligation to maintain or support the Software.  RTI shall
 * not be liable for any incidental or consequential damages arising out of the
 * use or inability to use the software.
 */

enum enumeration {
    @value(65) a,
    b,
    c
};

@nested
struct nested2 {
    float float_var;
    double double_var;
    boolean boolean_var;
    char char_var;
    octet octet_var;
    int64 longlong_var;
    string<100> string_var;
    sequence<int16,2> shortSeq_var;
    sequence<string<1000>,1000> stringSeq_var;
    int16 short_arr_var[2];
    int16 short_arr_var_2[2][3];
};

typedef union alias_target switch (int32) {
case 1:
    int32 long_uvar;
case 5:
    int64 long_long_uvar;
default:
    int16 short_uvar;
} alias_one;

typedef alias_one alias_two;

struct msg {
    @key int32 id;
    int32 count;
    int16 array_var[2];
    enumeration enum_type;
    nested2 struct_var;
    nested2 struct_var1;
    nested2 struct_var2;
    nested2 struct_var3;
    nested2 struct_var4;
    alias_two double_aliased_var;
};
