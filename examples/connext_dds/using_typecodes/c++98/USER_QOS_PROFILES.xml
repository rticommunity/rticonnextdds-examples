<?xml version="1.0"?>
<!--
 (c) 2005-2014 Copyright, Real-Time Innovations, Inc.  All rights reserved.
 RTI grants Licensee a license to use, modify, compile, and create derivative
 works of the Software.  Licensee has the right to distribute object form only
 for use with RTI products.  The Software is provided "as is", with no warranty
 of any type, including any warranty for fitness for any purpose. RTI is under
 no obligation to maintain or support the Software.  RTI shall not be liable for
 any incidental or consequential damages arising out of the use or inability to
 use the software.
 -->
<!-- 
Description
XML QoS Profile for msg

The QoS configuration of the DDS entities in the generated example is 
loaded from this file.

This file is used only when it is in the current working directory
or when the enviroment variable
NDDS_QOS_PROFILES is defined and points to this file.

For more information about XML QoS Profiles see Chapter 15 in the 
RTI Connext user manual.
-->
<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:noNamespaceSchemaLocation="http://community.rti.com/schema/6.1.0/rti_dds_qos_profiles.xsd">
    <!-- QoS Library containing the QoS profile used in the generated example.

        A QoS library is a named set of QoS profiles.
    -->
    <qos_library name="msg_Library">

        <!-- QoS profile used to configure reliable communication between the DataWriter 
             and DataReader created in the example code.

             A QoS profile groups a set of related QoS.
        -->
        <qos_profile name="msg_Profile" is_default_qos="true">
        
        	<domain_participant_qos>
        		<!-- The default value for 
        			resource_limits.type_code_max_serialized_length (2048 bytes)
        			is an insufficient size to hold the type codes correctly for 
				    our complex type. So we need to increase 
					resource_limits.type_code_max_serialized_length so that 
					built-in topics on the receiver side get the correct type 
					code information; in this example we set it to 3070 -->
        		<resource_limits>
        			<type_code_max_serialized_length>
        				3070
        			</type_code_max_serialized_length>
        		</resource_limits>
	       	</domain_participant_qos>
            <!-- QoS used to configure the data writer created in the example code -->                
            <datawriter_qos>
                <reliability>
                    <kind>RELIABLE_RELIABILITY_QOS</kind>
                </reliability>                

                <history>
                    <kind>KEEP_ALL_HISTORY_QOS</kind>
                </history>
		
            </datawriter_qos>

            <!-- QoS used to configure the data reader created in the example code -->                
            <datareader_qos>

                <reliability>
                    <kind>RELIABLE_RELIABILITY_QOS</kind>
                </reliability>
    
                <history>
                    <kind>KEEP_ALL_HISTORY_QOS</kind>
                </history>
			
            </datareader_qos>

            <domain_participant_qos>
                <!--
                The participant name, if it is set, will be displayed in the
                RTI Analyzer tool, making it easier for you to tell one
                application from another when you're debugging.
                -->
                <participant_name>
                    <name>RTI Using Typecodes C++ Example</name>
                </participant_name>

            </domain_participant_qos>
        </qos_profile>

    </qos_library>
</dds>
