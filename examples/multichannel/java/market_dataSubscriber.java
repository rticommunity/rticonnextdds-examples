/* market_dataSubscriber.java

 A publication of data of type market_data

 This file is derived from code automatically generated by the rtiddsgen 
 command:

 rtiddsgen -language java -example <arch> .idl

 Example publication of type market_data automatically generated by 
 'rtiddsgen' To test them follow these steps:

 (1) Compile this file and the example subscription.

 (2) Start the subscription on the same domain used for with the command
 java market_dataSubscriber <domain_id> <sample_count>

 (3) Start the publication with the command
 java market_dataPublisher <domain_id> <sample_count>

 (4) [Optional] Specify the list of discovery initial peers and 
 multicast receive addresses via an environment variable or a file 
 (in the current working directory) called NDDS_DISCOVERY_PEERS. 

 You can run any number of publishers and subscribers programs, and can 
 add and remove them dynamically from the domain.


 Example:

 To run the example application on domain <domain_id>:

 Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
 Java.                       

 On UNIX systems: 
 add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
 variable

 On Windows systems:
 add %NDDSHOME%\lib\<arch> to the 'Path' environment variable


 Run the Java applications:

 java -Djava.ext.dirs=$NDDSHOME/class market_dataPublisher <domain_id>

 java -Djava.ext.dirs=$NDDSHOME/class market_dataSubscriber <domain_id>  


 modification history
 ------------ -------   
 */

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;

import com.rti.dds.domain.*;
import com.rti.dds.infrastructure.*;
import com.rti.dds.subscription.*;
import com.rti.dds.topic.*;
import com.rti.ndds.config.*;

// ===========================================================================

public class market_dataSubscriber {
    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------

    public static void main(String[] args) {
        // --- Get domain ID --- //
        int domainId = 0;
        if (args.length >= 1) {
            domainId = Integer.valueOf(args[0]).intValue();
        }

        // -- Get max loop count; 0 means infinite loop --- //
        int sampleCount = 0;
        if (args.length >= 2) {
            sampleCount = Integer.valueOf(args[1]).intValue();
        }

        /*
         * Uncomment this to turn on additional logging
         * Logger.get_instance().set_verbosity_by_category(
         * LogCategory.NDDS_CONFIG_LOG_CATEGORY_API,
         * LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
         */

        // --- Run --- //
        subscriberMain(domainId, sampleCount);
    }

    // -----------------------------------------------------------------------
    // Private Methods
    // -----------------------------------------------------------------------

    // --- Constructors: -----------------------------------------------------

    private market_dataSubscriber() {
        super();
    }

    // -----------------------------------------------------------------------

    private static void subscriberMain(int domainId, int sampleCount) {

        DomainParticipant participant = null;
        Subscriber subscriber = null;
        Topic topic = null;
        DataReaderListener listener = null;
        market_dataDataReader reader = null;
        ContentFilteredTopic filteredTopic = null;
        StringSeq expressionParameters = null;

        try {

            // --- Create participant --- //

            /*
             * To customize participant QoS, use the configuration file
             * USER_QOS_PROFILES.xml
             */

            participant = DomainParticipantFactory.TheParticipantFactory
                    .create_participant(domainId,
                            DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
                            null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (participant == null) {
                System.err.println("create_participant error\n");
                return;
            }

            // --- Create subscriber --- //

            /*
             * To customize subscriber QoS, use the configuration file
             * USER_QOS_PROFILES.xml
             */

            subscriber = participant.create_subscriber(
                    DomainParticipant.SUBSCRIBER_QOS_DEFAULT,
                    null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (subscriber == null) {
                System.err.println("create_subscriber error\n");
                return;
            }

            // --- Create topic --- //

            /* Register type before creating topic */
            String typeName = market_dataTypeSupport.get_type_name();
            market_dataTypeSupport.register_type(participant, typeName);

            /*
             * To customize topic QoS, use the configuration file
             * USER_QOS_PROFILES.xml
             */

            topic = participant.create_topic("Example market_data", typeName,
                    DomainParticipant.TOPIC_QOS_DEFAULT, null /* listener */,
                    StatusKind.STATUS_MASK_NONE);
            if (topic == null) {
                System.err.println("create_topic error\n");
                return;
            }

            // // Start changes for MultiChannel
            expressionParameters = new StringSeq(1);
            filteredTopic = participant
                    .create_contentfilteredtopic_with_filter(
                            "Example market_data", topic, "Symbol MATCH 'A'",
                            expressionParameters,
                            DomainParticipant.STRINGMATCHFILTER_NAME);

            // --- Create reader --- //

            listener = new market_dataListener();

            /*
             * To customize data reader QoS, use the configuration file
             * USER_QOS_PROFILES.xml
             */

            reader = (market_dataDataReader) subscriber.create_datareader(
                    filteredTopic, Subscriber.DATAREADER_QOS_DEFAULT, listener,
                    StatusKind.STATUS_MASK_ALL);
            if (reader == null) {
                System.err.println("create_datareader error\n");
                return;
            }

            // --- Wait for data --- //

            final long receivePeriodSec = 4;

            for (int count = 0; (sampleCount == 0) || (count < sampleCount); 
                    ++count) {
                /*
                 * System.out.println("market_data subscriber sleeping for " +
                 * receivePeriodSec + " sec...");
                 */
                if (count == 3) {
                    filteredTopic.append_to_expression_parameter(0, "D");
                    System.out.println("changed filter to Symbol MATCH 'AD'");
                }
                if (count == 6) {
                    filteredTopic.remove_from_expression_parameter(0, "A");
                    System.out.println("changed filter to Symbol MATCH 'D'");
                }

                try {
                    Thread.sleep(receivePeriodSec * 1000); // in millisec
                } catch (InterruptedException ix) {
                    System.err.println("INTERRUPTED");
                    break;
                }
            }
            // // End changes for MultiChannel
        } finally {

            // --- Shutdown --- //

            if (participant != null) {
                participant.delete_contained_entities();

                DomainParticipantFactory.TheParticipantFactory
                        .delete_participant(participant);
            }
            /*
             * RTI Connext provides the finalize_instance() method for users who
             * want to release memory used by the participant factory singleton.
             * Uncomment the following block of code for clean destruction of
             * the participant factory singleton.
             */
            // DomainParticipantFactory.finalize_instance();
        }
    }

    // -----------------------------------------------------------------------
    // Private Types
    // -----------------------------------------------------------------------

    // =======================================================================

    private static class market_dataListener extends DataReaderAdapter {

        market_dataSeq _dataSeq = new market_dataSeq();
        SampleInfoSeq _infoSeq = new SampleInfoSeq();

        public void on_data_available(DataReader reader) {
            market_dataDataReader market_dataReader = 
                    (market_dataDataReader) reader;

            try {
                market_dataReader.take(_dataSeq, _infoSeq,
                        ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                        SampleStateKind.ANY_SAMPLE_STATE,
                        ViewStateKind.ANY_VIEW_STATE,
                        InstanceStateKind.ANY_INSTANCE_STATE);

                for (int i = 0; i < _dataSeq.size(); ++i) {
                    SampleInfo info = (SampleInfo) _infoSeq.get(i);

                    if (info.valid_data) {
                        System.out.println(((market_data) _dataSeq.get(i))
                                .toString("Received", 0));

                    }
                }
            } catch (RETCODE_NO_DATA noData) {
                // No data to process
            } finally {
                market_dataReader.return_loan(_dataSeq, _infoSeq);
            }
        }
    }
}
