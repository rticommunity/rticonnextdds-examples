/* market_dataPublisher.java

 A publication of data of type market_data

 This file is derived from code automatically generated by the rtiddsgen 
 command:

 rtiddsgen -language java -example <arch> .idl

 Example publication of type market_data automatically generated by 
 'rtiddsgen' To test them follow these steps:

 (1) Compile this file and the example subscription.

 (2) Start the subscription with the command
 java market_dataSubscriber <domain_id> <sample_count>

 (3) Start the publication with the command
 java market_dataPublisher <domain_id> <sample_count>

 (4) [Optional] Specify the list of discovery initial peers and 
 multicast receive addresses via an environment variable or a file 
 (in the current working directory) called NDDS_DISCOVERY_PEERS.  

 You can run any number of publishers and subscribers programs, and can 
 add and remove them dynamically from the domain.

 Example:

 To run the example application on domain <domain_id>:

 Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
 Java.                       

 On Unix: 
 add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
 variable

 On Windows:
 add %NDDSHOME%\lib\<arch> to the 'Path' environment variable


 Run the Java applications:

 java -Djava.ext.dirs=$NDDSHOME/class market_dataPublisher <domain_id>

 java -Djava.ext.dirs=$NDDSHOME/class market_dataSubscriber <domain_id>        



 modification history
 ------------ -------         
 */

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;

import com.rti.dds.domain.*;
import com.rti.dds.infrastructure.*;
import com.rti.dds.publication.*;
import com.rti.dds.topic.*;
import com.rti.ndds.config.*;

// ===========================================================================

public class market_dataPublisher {
    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------

    public static void main(String[] args) {
        // --- Get domain ID --- //
        int domainId = 0;
        if (args.length >= 1) {
            domainId = Integer.valueOf(args[0]).intValue();
        }

        // -- Get max loop count; 0 means infinite loop --- //
        int sampleCount = 0;
        if (args.length >= 2) {
            sampleCount = Integer.valueOf(args[1]).intValue();
        }

        /*
         * Uncomment this to turn on additional logging
         * Logger.get_instance().set_verbosity_by_category(
         * LogCategory.NDDS_CONFIG_LOG_CATEGORY_API,
         * LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
         */

        // --- Run --- //
        publisherMain(domainId, sampleCount);
    }

    // -----------------------------------------------------------------------
    // Private Methods
    // -----------------------------------------------------------------------

    // --- Constructors: -----------------------------------------------------

    private market_dataPublisher() {
        super();
    }

    // -----------------------------------------------------------------------

    private static void publisherMain(int domainId, int sampleCount) {

        DomainParticipant participant = null;
        Publisher publisher = null;
        Topic topic = null;
        market_dataDataWriter writer = null;

        try {
            // --- Create participant --- //

            /*
             * To customize participant QoS, use the configuration file
             * USER_QOS_PROFILES.xml
             */

            participant = DomainParticipantFactory.TheParticipantFactory
                    .create_participant(domainId,
                            DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
                            null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (participant == null) {
                System.err.println("create_participant error\n");
                return;
            }

            // --- Create publisher --- //

            /*
             * To customize publisher QoS, use the configuration file
             * USER_QOS_PROFILES.xml
             */

            publisher = participant.create_publisher(
                    DomainParticipant.PUBLISHER_QOS_DEFAULT,
                    null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (publisher == null) {
                System.err.println("create_publisher error\n");
                return;
            }

            // --- Create topic --- //

            /* Register type before creating topic */
            String typeName = market_dataTypeSupport.get_type_name();
            market_dataTypeSupport.register_type(participant, typeName);

            /*
             * To customize topic QoS, use the configuration file
             * USER_QOS_PROFILES.xml
             */

            topic = participant.create_topic("Example market_data", typeName,
                    DomainParticipant.TOPIC_QOS_DEFAULT, null /* listener */,
                    StatusKind.STATUS_MASK_NONE);
            if (topic == null) {
                System.err.println("create_topic error\n");
                return;
            }
            /*
             * If you want to change the DataWriter's QoS programmatically
             * rather than using the XML file, you will need to add the
             * following lines to your code and modify the datawriter creation
             * fuction using writer_qos.
             * 
             * In this case, we set the publish as multichannel using the
             * differents channel to send differents symbol. Every channel have
             * a IP to send the data.
             */
            /* Start changes for MultiChannel */
            // DataWriterQos writer_qos = new DataWriterQos();
            // try {
            // publisher.get_default_datawriter_qos(writer_qos);
            // } catch (Exception e) {
            // System.err.println("! Unable to get_default_datawriter_qos "
            // + e);
            // }
            //
            // writer_qos.multi_channel.channels.setMaximum(8);
            // ChannelSettings_t channel = new ChannelSettings_t();
            // channel.multicast_settings.setMaximum(1);
            // TransportMulticastSettings_t multicast_setting = new
            // TransportMulticastSettings_t();
            // try {
            // channel.filter_expression = "Symbol MATCH '[A-C]*'";
            // multicast_setting.receive_address = InetAddress
            // .getByName("239.255.0.2");
            // channel.multicast_settings.add(multicast_setting);
            // writer_qos.multi_channel.channels.add(
            // new ChannelSettings_t(channel));
            //
            // channel.filter_expression = "Symbol MATCH '[D-F]*'";
            // multicast_setting.receive_address = InetAddress
            // .getByName("239.255.0.3");
            // channel.multicast_settings.set(0, multicast_setting);
            // writer_qos.multi_channel.channels.add(
            // new ChannelSettings_t(channel));
            //
            // channel.filter_expression = "Symbol MATCH '[G-I]*'";
            // multicast_setting.receive_address = InetAddress
            // .getByName("239.255.0.4");
            // channel.multicast_settings.set(0, multicast_setting);
            // writer_qos.multi_channel.channels.add(
            // new ChannelSettings_t(channel));
            //
            // channel.filter_expression = "Symbol MATCH '[J-L]*'";
            // multicast_setting.receive_address = InetAddress
            // .getByName("239.255.0.5");
            // channel.multicast_settings.set(0, multicast_setting);
            // writer_qos.multi_channel.channels.add(
            // new ChannelSettings_t(channel));
            //
            // channel.filter_expression = "Symbol MATCH '[M-O]*'";
            // multicast_setting.receive_address = InetAddress
            // .getByName("239.255.0.6");
            // channel.multicast_settings.set(0, multicast_setting);
            // writer_qos.multi_channel.channels.add(
            // new ChannelSettings_t(channel));
            //
            // channel.filter_expression = "Symbol MATCH '[P-S]*'";
            // multicast_setting.receive_address = InetAddress
            // .getByName("239.255.0.7");
            // channel.multicast_settings.set(0, multicast_setting);
            // writer_qos.multi_channel.channels.add(
            // new ChannelSettings_t(channel));
            //
            // channel.filter_expression = "Symbol MATCH '[T-V]*'";
            // multicast_setting.receive_address = InetAddress
            // .getByName("239.255.0.8");
            // channel.multicast_settings.set(0, multicast_setting);
            // writer_qos.multi_channel.channels.add(
            // new ChannelSettings_t(channel));
            //
            // channel.filter_expression = "Symbol MATCH '[W-Z]*'";
            // multicast_setting.receive_address = InetAddress
            // .getByName("239.255.0.9");
            // channel.multicast_settings.set(0, multicast_setting);
            // writer_qos.multi_channel.channels.add(
            // new ChannelSettings_t(channel));
            // } catch (Exception e) {
            // System.err.println("Unable to create qos settings: " + e);
            // }
            // --- Create writer --- //

            /*
             * To customize data writer QoS, use the configuration file
             * USER_QOS_PROFILES.xml
             */
            /*
             * toggle between writer_qos and DDS_DATAWRITER_QOS_DEFAULT to
             * alternate between using code and using XML to specify the Qos
             */
            writer = (market_dataDataWriter) publisher.create_datawriter(topic,
            /* writer_qos */Publisher.DATAWRITER_QOS_DEFAULT,
                    null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (writer == null) {
                System.err.println("create_datawriter error\n");
                return;
            }

            /* End changes for MultiChannel */
            // --- Write --- //

            /* Create data sample for writing */
            market_data instance = new market_data();

            InstanceHandle_t instance_handle = InstanceHandle_t.HANDLE_NIL;
            /*
             * For a data type that has a key, if the same instance is going to
             * be written multiple times, initialize the key here and register
             * the keyed instance prior to writing
             */
            // instance_handle = writer.register_instance(instance);

            final long sendPeriodMillis = 100; // 0.1 seconds

            for (int count = 0; (sampleCount == 0) || (count < sampleCount); ++count) {
                // System.out.println("Writing market_data, count " + count);

                /* Changes for MultiChannel */
                /* Modify the instance to be written here */
                char SymbolBuffer[] = { (char) ('A' + (char) (count % 26)) };
                String Symbol = new String(SymbolBuffer);
                instance.Symbol = Symbol;
                instance.Price = count;

                /* Write data */
                writer.write(instance, instance_handle);
                try {
                    Thread.sleep(sendPeriodMillis);
                } catch (InterruptedException ix) {
                    System.err.println("INTERRUPTED");
                    break;
                }
            }

            // writer.unregister_instance(instance, instance_handle);

        } finally {

            // --- Shutdown --- //

            if (participant != null) {
                participant.delete_contained_entities();

                DomainParticipantFactory.TheParticipantFactory
                        .delete_participant(participant);
            }
            /*
             * RTI Connext provides finalize_instance() method for people who
             * want to release memory used by the participant factory singleton.
             * Uncomment the following block of code for clean destruction of
             * the participant factory singleton.
             */
            // DomainParticipantFactory.finalize_instance();
        }
    }
}
